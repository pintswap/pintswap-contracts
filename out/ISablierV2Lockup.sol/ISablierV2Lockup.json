{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "senderAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "recipientAmount",
          "type": "uint128"
        }
      ],
      "name": "CancelLockupStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "protocolRevenues",
          "type": "uint128"
        }
      ],
      "name": "ClaimProtocolRevenues",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "RenounceLockupStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "SetComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "oldNFTDescriptor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "newNFTDescriptor",
          "type": "address"
        }
      ],
      "name": "SetNFTDescriptor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "TransferAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "WithdrawFromLockupStream",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "UD60x18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "claimProtocolRevenues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ISablierV2Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getDepositedAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "depositedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getEndTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "endTime",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRefundedAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "refundedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStartTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "startTime",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawnAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawnAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isCancelable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isCold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isDepleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isWarm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStreamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "protocolRevenues",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "revenues",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "refundableAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "refundableAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "renounce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISablierV2Comptroller",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "setComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "newNFTDescriptor",
          "type": "address"
        }
      ],
      "name": "setNFTDescriptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "statusOf",
      "outputs": [
        {
          "internalType": "enum Lockup.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "streamedAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "streamedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "wasCanceled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawMaxAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128[]",
          "name": "amounts",
          "type": "uint128[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "withdrawableAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawableAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "MAX_FEE()": "bc063e1a",
    "admin()": "f851a440",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "cancel(uint256)": "40e58ee5",
    "cancelMultiple(uint256[])": "8659c270",
    "claimProtocolRevenues(address)": "a6202bf2",
    "comptroller()": "5fe3b567",
    "getApproved(uint256)": "081812fc",
    "getAsset(uint256)": "eac8f5b8",
    "getDepositedAmount(uint256)": "a80fc071",
    "getEndTime(uint256)": "9067b677",
    "getRecipient(uint256)": "6d0cee75",
    "getRefundedAmount(uint256)": "d4dbd20b",
    "getSender(uint256)": "b971302a",
    "getStartTime(uint256)": "bc2be1be",
    "getWithdrawnAmount(uint256)": "d511609f",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isCancelable(uint256)": "4857501f",
    "isCold(uint256)": "8f69b993",
    "isDepleted(uint256)": "425d30dd",
    "isStream(uint256)": "b8a3be66",
    "isWarm(uint256)": "1c1cdd4c",
    "name()": "06fdde03",
    "nextStreamId()": "1e99d569",
    "ownerOf(uint256)": "6352211e",
    "protocolRevenues(address)": "39a73c03",
    "refundableAmountOf(uint256)": "1400ecec",
    "renounce(uint256)": "7de6b1db",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setComptroller(address)": "8bad38dd",
    "setNFTDescriptor(address)": "7cad6cd1",
    "statusOf(uint256)": "ad35efd4",
    "streamedAmountOf(uint256)": "4869e12d",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "transferAdmin(address)": "75829def",
    "transferFrom(address,address,uint256)": "23b872dd",
    "wasCanceled(uint256)": "f590c176",
    "withdraw(uint256,address,uint128)": "fdd46d60",
    "withdrawMax(uint256,address)": "ea5ead19",
    "withdrawMaxAndTransfer(uint256,address)": "c156a11d",
    "withdrawMultiple(uint256[],address,uint128[])": "a2ffb897",
    "withdrawableAmountOf(uint256)": "d975dfed"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"senderAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"recipientAmount\",\"type\":\"uint128\"}],\"name\":\"CancelLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolRevenues\",\"type\":\"uint128\"}],\"name\":\"ClaimProtocolRevenues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RenounceLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"SetComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"oldNFTDescriptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"SetNFTDescriptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawFromLockupStream\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"UD60x18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"claimProtocolRevenues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getDepositedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"depositedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRefundedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCancelable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isDepleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isWarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"protocolRevenues\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"revenues\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"refundableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"setComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"setNFTDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"enum Lockup.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"streamedAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"streamedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"wasCanceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"withdrawMaxAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"withdrawableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"CancelLockupStream(uint256,address,address,uint128,uint128)\":{\"params\":{\"recipient\":\"The address of the stream's recipient.\",\"recipientAmount\":\"The amount of assets left for the stream's recipient to withdraw, denoted in units of the asset's decimals.\",\"sender\":\"The address of the stream's sender.\",\"senderAmount\":\"The amount of assets refunded to the stream's sender, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream.\"}},\"ClaimProtocolRevenues(address,address,uint128)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"asset\":\"The contract address of the ERC-20 asset the protocol revenues have been claimed for.\",\"protocolRevenues\":\"The amount of protocol revenues claimed, denoted in units of the asset's decimals.\"}},\"RenounceLockupStream(uint256)\":{\"params\":{\"streamId\":\"The id of the stream.\"}},\"SetComptroller(address,address,address)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"newComptroller\":\"The address of the new comptroller contract.\",\"oldComptroller\":\"The address of the old comptroller contract.\"}},\"SetNFTDescriptor(address,address,address)\":{\"params\":{\"admin\":\"The address of the current contract admin.\",\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\",\"oldNFTDescriptor\":\"The address of the old NFT descriptor contract.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"TransferAdmin(address,address)\":{\"params\":{\"newAdmin\":\"The address of the new admin.\",\"oldAdmin\":\"The address of the old admin.\"}},\"WithdrawFromLockupStream(uint256,address,uint128)\":{\"params\":{\"amount\":\"The amount of assets withdrawn, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream.\",\"to\":\"The address that has received the withdrawn assets.\"}}},\"kind\":\"dev\",\"methods\":{\"MAX_FEE()\":{\"details\":\"This value is hard coded as a constant.\"},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.\",\"params\":{\"streamId\":\"The id of the stream NFT to burn.\"}},\"cancel(uint256)\":{\"details\":\"Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender` is, and if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).\",\"params\":{\"streamId\":\"The id of the stream to cancel.\"}},\"cancelMultiple(uint256[])\":{\"details\":\"Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.\",\"params\":{\"streamIds\":\"The ids of the streams to cancel.\"}},\"claimProtocolRevenues(address)\":{\"details\":\"Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"asset\":\"The contract address of the ERC-20 asset for which to claim protocol revenues.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getAsset(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getDepositedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getEndTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRecipient(uint256)\":{\"details\":\"Reverts if the NFT has been burned.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRefundedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getSender(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getStartTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getWithdrawnAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isCancelable(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isCold(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isDepleted(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isStream(uint256)\":{\"details\":\"Does not revert if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isWarm(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"protocolRevenues(address)\":{\"params\":{\"asset\":\"The contract address of the ERC-20 asset to query.\"}},\"refundableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"renounce(uint256)\":{\"details\":\"Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.\",\"params\":{\"streamId\":\"The id of the stream to renounce.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setComptroller(address)\":{\"details\":\"Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newComptroller\":\"The address of the new comptroller contract.\"}},\"setNFTDescriptor(address)\":{\"details\":\"Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\"}},\"statusOf(uint256)\":{\"params\":{\"streamId\":\"The stream id for the query.\"}},\"streamedAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferAdmin(address)\":{\"details\":\"Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newAdmin\":\"The address of the new admin.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"wasCanceled(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"withdraw(uint256,address,uint128)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.\",\"params\":{\"amount\":\"The amount to withdraw, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMax(uint256,address)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.\",\"params\":{\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMaxAndTransfer(uint256,address)\":{\"details\":\"Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.\",\"params\":{\"newRecipient\":\"The address of the new owner of the stream NFT.\",\"streamId\":\"The id of the stream NFT to transfer.\"}},\"withdrawMultiple(uint256[],address,uint128[])\":{\"details\":\"Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.\",\"params\":{\"amounts\":\"The amounts to withdraw, denoted in units of the asset's decimals.\",\"streamIds\":\"The ids of the streams to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}}},\"title\":\"ISablierV2Lockup\",\"version\":1},\"userdoc\":{\"events\":{\"CancelLockupStream(uint256,address,address,uint128,uint128)\":{\"notice\":\"Emitted when a stream is canceled.\"},\"ClaimProtocolRevenues(address,address,uint128)\":{\"notice\":\"Emitted when the admin claims all protocol revenues accrued for a particular ERC-20 asset.\"},\"RenounceLockupStream(uint256)\":{\"notice\":\"Emitted when a sender gives up the right to cancel a stream.\"},\"SetComptroller(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new comptroller contract.\"},\"SetNFTDescriptor(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new NFT descriptor contract.\"},\"TransferAdmin(address,address)\":{\"notice\":\"Emitted when the admin is transferred.\"},\"WithdrawFromLockupStream(uint256,address,uint128)\":{\"notice\":\"Emitted when assets are withdrawn from a stream.\"}},\"kind\":\"user\",\"methods\":{\"MAX_FEE()\":{\"notice\":\"Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%.\"},\"admin()\":{\"notice\":\"The address of the admin account or contract.\"},\"burn(uint256)\":{\"notice\":\"Burns the NFT associated with the stream.\"},\"cancel(uint256)\":{\"notice\":\"Cancels the stream and refunds any remaining assets to the sender.\"},\"cancelMultiple(uint256[])\":{\"notice\":\"Cancels multiple streams and refunds any remaining assets to the sender.\"},\"claimProtocolRevenues(address)\":{\"notice\":\"Claims all accumulated protocol revenues for the provided ERC-20 asset.\"},\"comptroller()\":{\"notice\":\"Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration.\"},\"getAsset(uint256)\":{\"notice\":\"Retrieves the address of the ERC-20 asset used for streaming.\"},\"getDepositedAmount(uint256)\":{\"notice\":\"Retrieves the amount deposited in the stream, denoted in units of the asset's decimals.\"},\"getEndTime(uint256)\":{\"notice\":\"Retrieves the stream's end time, which is a Unix timestamp.\"},\"getRecipient(uint256)\":{\"notice\":\"Retrieves the stream's recipient.\"},\"getRefundedAmount(uint256)\":{\"notice\":\"Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled.\"},\"getSender(uint256)\":{\"notice\":\"Retrieves the stream's sender.\"},\"getStartTime(uint256)\":{\"notice\":\"Retrieves the stream's start time, which is a Unix timestamp.\"},\"getWithdrawnAmount(uint256)\":{\"notice\":\"Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals.\"},\"isCancelable(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`.\"},\"isCold(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted.\"},\"isDepleted(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is depleted.\"},\"isStream(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream exists.\"},\"isWarm(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming.\"},\"nextStreamId()\":{\"notice\":\"Counter for stream ids, used in the create functions.\"},\"protocolRevenues(address)\":{\"notice\":\"Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals.\"},\"refundableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals.\"},\"renounce(uint256)\":{\"notice\":\"Removes the right of the stream's sender to cancel the stream.\"},\"setComptroller(address)\":{\"notice\":\"Assigns a new comptroller contract responsible for the protocol configuration.\"},\"setNFTDescriptor(address)\":{\"notice\":\"Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs.\"},\"statusOf(uint256)\":{\"notice\":\"Retrieves the stream's status.\"},\"streamedAmountOf(uint256)\":{\"notice\":\"Calculates the amount streamed to the recipient, denoted in units of the asset's decimals.\"},\"transferAdmin(address)\":{\"notice\":\"Transfers the contract admin to a new address.\"},\"wasCanceled(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream was canceled.\"},\"withdraw(uint256,address,uint128)\":{\"notice\":\"Withdraws the provided amount of assets from the stream to the `to` address.\"},\"withdrawMax(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the provided address `to`.\"},\"withdrawMaxAndTransfer(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`.\"},\"withdrawMultiple(uint256[],address,uint128[])\":{\"notice\":\"Withdraws assets from streams to the provided address `to`.\"},\"withdrawableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals.\"}},\"notice\":\"Common logic between all Sablier V2 lockup streaming contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/v2-core/src/interfaces/ISablierV2Lockup.sol\":\"ISablierV2Lockup\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/v2-core/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/v2-core/lib/prb-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-deploy-proxy/=lib/forge-deploy/examples/basic/lib/forge-deploy-proxy/src/\",\":forge-deploy/=lib/forge-deploy/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":prb-math/=lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/v2-core/lib/prb-test/src/\",\":solady/=lib/v2-core/lib/solady/\",\":solarray/=lib/v2-core/lib/solarray/src/\",\":uniswap-v2-core/=lib/uniswap-v2-core/contracts/\",\":uniswap-v2-periphery/=lib/uniswap-v2-periphery/contracts/\",\":v2-core/=lib/v2-core/\"]},\"sources\":{\"lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x8d4cb0754ee7faf208c69cff231bb75ca4676db78c32e6fd4a06b71b739b3571\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d66d89d40895a0f68bb82ef5ba6605924e9a37ba4e79e21df2e63afc30916aa7\",\"dweb:/ipfs/QmWAsZysULG6BMRwQjjCeqV1TimAAWGiFC2aAGt3eb6gh6\"]},\"lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x23018238ee951d13a9d7f7d2cd641065752923c0aeede09a58a7f1fabf891d75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83a5286e82596aa938b6e38803360ca935b9727dc98f317b318a559ae9f438a5\",\"dweb:/ipfs/QmaBhNbpWZ6JPrfhuqX54DAtZj35yX278vArsNr5WtdXoZ\"]},\"lib/v2-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x540685d7ece3faa56f38253270ff11b18e63949fb8659c408123b1874674492e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5474839e19e2571c52eae3aab1dc6e6edf2b20bbba9895f59db6594a2678a3d5\",\"dweb:/ipfs/QmVHocBeANMkq4TzVM7q9At5NSg1TEpT9D9vgJ5dGcvcPN\"]},\"lib/v2-core/lib/prb-math/src/Common.sol\":{\"keccak256\":\"0x8c348a8711a5036ca64904ff546fb0c27a11143e3a1c1217ea22e1cebd08b126\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db9000ccca882c9a4d78cb18b80e10ab6c19a9765cd57638c462b7e526c54a80\",\"dweb:/ipfs/QmYkM5pmgMrjau6YMNrNvrwSBEytc9jT8jGb2YdxhB4woe\"]},\"lib/v2-core/lib/prb-math/src/UD2x18.sol\":{\"keccak256\":\"0x179b0a5b8df55b8bd0604c4d325e4756891e1cd88a4d92adf1b8630bb4610d6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://abcad423258a6122417ba15d59af5bca32bb629df203b664b450d5e0523c8d95\",\"dweb:/ipfs/QmZXFJ9sShEeMz9X4XmmdtrW6zBVB7qUcft4Tfx5sSUHAG\"]},\"lib/v2-core/lib/prb-math/src/UD60x18.sol\":{\"keccak256\":\"0xdd6ee8bbbb9f4c288aa1455685e0dfd81c54aaec976f05ddf003d2b8f0c89639\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c574478b6f297ae9236ca342d755f6bb5163a4a2dac7f5f6a09ffb34a55069de\",\"dweb:/ipfs/QmQNfbjhqSwKLusdkhAukxnAMfavWqbBxpQ2MtiZR6LkSk\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/Casting.sol\":{\"keccak256\":\"0xeb29a206d3c96b2c9b897e4bcec586e2ad6f91825f9e14601d9ee01c24e493ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7279879074ecb41f116f07bb437849f3597a65e44e7facb0d8936e333674537f\",\"dweb:/ipfs/QmTpC8zBrFN7PjPoYBH2RGYWaA6hxaAS9kS9Bwzm7zBogV\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/Constants.sol\":{\"keccak256\":\"0x309c5b7cda602e140f3f8332d2e449b8abec0fa7bf81b67b9c98e1cf28aa8e8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://209d57cfff646b020ed1af00df92f0b5e0a73fdac56fcc7d0ceb5e4365fefaf2\",\"dweb:/ipfs/QmdDtHpQK2sBAugSmuf1iBdZRg35Ygv3vradVhdbhikGUM\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/Errors.sol\":{\"keccak256\":\"0x72058e9cd109aa432cd8beccbdca9398389599151dc5dbc2d84eeafa289c792c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a85b24b61de3288fdc2ed0bb3acccec390b02b68d15b32c9c8c11aa368f700f\",\"dweb:/ipfs/Qme7iL75jWiTKKRSZt6p3FMtyY2mnoxcdJygS4ycf2m5Qq\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/ValueType.sol\":{\"keccak256\":\"0xdcde09130ea4ce86fadd88bbdb3e740c69dc86ce5239957694a8343e6ff9644a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbf356aa75e0525e9cf22cccc3151d955a9e78f91eb2c88f2744b09f9ef80079\",\"dweb:/ipfs/QmUMaVrFuidro7TvgGNBdHpFHzSA2DRVsMVAygEdQyL1Ct\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Casting.sol\":{\"keccak256\":\"0x3a632d2ae4779370b02d4f43a4ec6e3808528c2e09055e803ed87df983cad35e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://832ec36c135ff7ddb0bd93ca462aea4eb4521f1daddf4107a690e0c7b94214ec\",\"dweb:/ipfs/Qmcj9uXDMVX97wGbu44NDGLdcTCuuVRhPF4vhr3UjjeLrd\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Constants.sol\":{\"keccak256\":\"0x312e75443376ff6bc05125c16ea1a722a80ed6a6a2a7b020678c38213a70162a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a438ac6c4856d78541746484c1a5e1398ff6b505862058c89e90febdffc28f72\",\"dweb:/ipfs/QmYhRQ33bdLWSqbySqKQtu9fzKpQrEXEKzuS1TFwyMtbDg\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Errors.sol\":{\"keccak256\":\"0x71a19d407221fcea92fcac522d36010ba42c3ce2ed7d4a1eec283bd5ac0cf9e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://996ad3941b48e86433352d2ad8b19eafd3ff2454983bd8ffea28d37d6c4447cc\",\"dweb:/ipfs/QmV2VSpQimdngfY5fx8SVARDecJdN19TPjbFckUAAoGcKM\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Helpers.sol\":{\"keccak256\":\"0xc8b24ba940189a13418aae6c1483a7b9acde1d35a99ee0134f6d58ec05c524c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d71dc8cbded4150cc3db9612123892e4ee79e6a37d106c40f406054ba4035792\",\"dweb:/ipfs/QmeyY1XasbY2iE997mjDyzUKYCfdsppnRQV3FvvYF5uhiw\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Math.sol\":{\"keccak256\":\"0x561694ead1deae45027c5851c24eab53dc9f8a7eb8c623fdf5eebe56dd9da20a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1dc6789db7d57ce54bc82c5aa74623dc12c3e0cafbaf921940788d0f502a66c5\",\"dweb:/ipfs/QmeiDrGFSCGNk99ggThYVE4pEaEAgb4LmxgZZKq4GWS2Sv\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/ValueType.sol\":{\"keccak256\":\"0xaf4cc89130b6ce22ae7e1d1bd8d912019278d7d9b35e37bb211aa78cc1b7ff32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c535c057358dda38d58c596272ad505811563bcfad51545ae82f0e9d0e39cb9\",\"dweb:/ipfs/QmVDTjMFxzZqtmLEQm55KaPy6hytAqG7Ve2tYzvYCvswcv\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/Casting.sol\":{\"keccak256\":\"0x395a47779cf0a9358b9998a5ebfc48a0dc07062e4f6a5d3ac536f7870e43691e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f626199e5bc02936ac2520ff4d2f26ff318536e83e47b9880f558b85114282d3\",\"dweb:/ipfs/QmaqVnsvezFpoYoYDhFoskKFvUL37DW6Hwry5ktvkX5KvJ\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/Constants.sol\":{\"keccak256\":\"0xe7cad7b8cb3daa6d124e5b4b9aff8148bb4b573f5ead0b8ffe16f8548c1a8587\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8c477fb4a12612276c5746052897fce01cf6ad0f31cc8e6b19b7e125ef41bb5\",\"dweb:/ipfs/QmWENWZ15cTVByU2ixuHbNdk5EjCaawkstTbn7vNnRzZtU\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/Errors.sol\":{\"keccak256\":\"0x28e16c14bae589f4d257726a7b6d89ec03112712beaf0f91b33c0a188519fe87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e80ca782d9ea4e5f1ba02981ec5bba4df740912b192e1a2b119e6fa920c45aea\",\"dweb:/ipfs/QmYhdVYTh67Mbh77aQMHt1UTbJKuuhHeT4nhCbKCAM3HEr\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/ValueType.sol\":{\"keccak256\":\"0xc8590c817624727ad369239cdf304b71015041714d6bf2f88569797742be628c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e9d4071f4c97d4582e6cc0290254e798593185bc0b0c4d399758677e5253921\",\"dweb:/ipfs/QmUjpqj1Y9wnmgVhtPQXTJ7eW1wwhfaWJbHRCrxZ2niQ3T\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Casting.sol\":{\"keccak256\":\"0xbdce3b69f27fb198ea084b5df90a83075a61e9fee7021da2e556fa7c8a7574cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b09c907651b797384f53009e70a11fd6c7a795a85158e872598f13c337500b2\",\"dweb:/ipfs/QmUKCfKrcsbsR1QqhDpsC7NanQhPyuoVa3KS78Lqy83Lfi\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Constants.sol\":{\"keccak256\":\"0x3d2219fe39162d051d993702598c15a2735784fff0c0d2dadea1b02a51cb20f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://176f0175397a2965f2b1380c9f97cdcffdafaa7f2d3585c5db26d61b4902299e\",\"dweb:/ipfs/QmbuGa84ah972Qa2JBFHbE4aLoN6cx1J8hDLztzStGrRMf\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Conversions.sol\":{\"keccak256\":\"0xa949472633cc36fa8d2714e167ff71b51198358bf3f6117d038350e14f30cec8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f2d3b3631b3b43cd43f3ef41c2912582eb7bd56c83dfab417adf1a7afa81fd4\",\"dweb:/ipfs/QmfDFXkXLYp1skMZ6CBnYkL3aJKdVPfC9SnfcSSwbkJ2Wm\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Errors.sol\":{\"keccak256\":\"0x3a25f4e18a8a69fa9ac84f826bbfa4b6535788ae9a26623cc848e169e5d842ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b34b02e146128930fa73b3a2de2f22c27dbf180012096d2602256263fdda18a\",\"dweb:/ipfs/QmQ46FQ2arioGSwAePLiLDGv6CBtkrqdJAifV7MFPqfPPu\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Helpers.sol\":{\"keccak256\":\"0x24c9c09d2dd73770c516a4f08296aa9e83b6431b52d97990a726c41c8aa2746f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5ec749ccb50bd3420346951875c2a0bb6469e90190c82630de6b2117a8fad29\",\"dweb:/ipfs/QmT4dgxVtbwMbSLyFRXeyYzfda7AvMyRUVZzd6yUS8qr7C\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Math.sol\":{\"keccak256\":\"0xb9c4ab4753274baf1cc88b90da04b1308445c074eb94d7ab229109d78602497b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e80843aeb21429a0c12dfd22f2f1d69478de32b8cb17b312e86fa2b0cfe50f7e\",\"dweb:/ipfs/QmdY293FrZb9KeaHTfq7wMXpQWinqFHhiLaSyQLKNcWs8w\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/ValueType.sol\":{\"keccak256\":\"0x3a2ada6e87a1c61d3a58e7ff9d5ea9eee00a4cca8b350a9d461e3bb2867693f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://021a34174b566e8575ce7f9d8f93f3e96c8fa748192bc5f9b4bdc049ce6675cc\",\"dweb:/ipfs/QmXa6CXbEnf7K64phvDePsjznomBWZMkCg5nGn81KuwFf2\"]},\"lib/v2-core/src/interfaces/IAdminable.sol\":{\"keccak256\":\"0x289bd3a74cb971dd3928c44d194d9b75939d75494901df32512b5ccbc0ed8cb0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://634a0098bc40a927bbefe46f6f2d8a5d94f9f92c5bad0149e4c7da67b0731bc7\",\"dweb:/ipfs/QmVsMVaKZ51uG7wyTrcoSMHsMYmVvuCuPnVgNHJfFRKeSQ\"]},\"lib/v2-core/src/interfaces/ISablierV2Base.sol\":{\"keccak256\":\"0x7fa3b890885b19de99e290ccd1d90da3d021be70bd4792c582b7f9e451749792\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5efc3274c9ac532baf96805f127e8b46b7292b12149eca7d830263bbe6ffde95\",\"dweb:/ipfs/QmNZaKcPahmA8juiY42FShVvRn4pktyubP13oyr5p6uCJk\"]},\"lib/v2-core/src/interfaces/ISablierV2Comptroller.sol\":{\"keccak256\":\"0x2133c91a65c1cdfa24b0c5b35317848d167436d49ecef4e22b72934f8ed9f2fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f6935d55b1763eeca5e4392542586b2168f100036bcffddd6800cf28aa18052c\",\"dweb:/ipfs/QmRzRxdbcppc1tMv1gQ9NzT5iftEFP8QS57G1RbyAKbyoT\"]},\"lib/v2-core/src/interfaces/ISablierV2Lockup.sol\":{\"keccak256\":\"0xa971017f4caff1aff29e1cfc6edac609d771b967aafb8543104bccdd0a5a77d0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://cc9319188115a84f87891a8745bf42511fee66c213d97d99d08e35aaa4720d93\",\"dweb:/ipfs/QmeFjJZoKA2wGzVoBdwx8f6baciuKZUBQRYiyo2Moidhic\"]},\"lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol\":{\"keccak256\":\"0xe7840e59d0ce011e0be119098e82a3b4deb6ca779c816855ebed6a29349fc970\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://733f9f5f21b72b76a121677b5f2dcd113e301408d969b5364d082c7c9dc8fec7\",\"dweb:/ipfs/QmdtUp1Ss4dHBnosNkjT9tCuxJ26UTP5dBxrVEJRZhe76E\"]},\"lib/v2-core/src/types/DataTypes.sol\":{\"keccak256\":\"0x83883c59bf969d1f64d3eaa073c35e3ab4e1cdf5502a3973ba710eb282cbb2b4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4616d1730d519454bba426748a9fbf71dd5488c38b6a7584e49f7a669150bfcc\",\"dweb:/ipfs/QmXqLNBS9J3hnuR9bzh8cc4Q63KdLs8M9Ze9F3P2k8rBhL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "senderAmount",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "recipientAmount",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CancelLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "protocolRevenues",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimProtocolRevenues",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RenounceLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "oldComptroller",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "newComptroller",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetComptroller",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "oldNFTDescriptor",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "newNFTDescriptor",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetNFTDescriptor",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "oldAdmin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newAdmin",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TransferAdmin",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "WithdrawFromLockupStream",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MAX_FEE",
          "outputs": [
            {
              "internalType": "UD60x18",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "admin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancel"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "streamIds",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelMultiple"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claimProtocolRevenues"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "comptroller",
          "outputs": [
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAsset",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDepositedAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "depositedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getEndTime",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "endTime",
              "type": "uint40"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRefundedAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "refundedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSender",
          "outputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStartTime",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "startTime",
              "type": "uint40"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getWithdrawnAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "withdrawnAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isCancelable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isCold",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isDepleted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isStream",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isWarm",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextStreamId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "protocolRevenues",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "revenues",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "refundableAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "refundableAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounce"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "newComptroller",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setComptroller"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "newNFTDescriptor",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setNFTDescriptor"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "statusOf",
          "outputs": [
            {
              "internalType": "enum Lockup.Status",
              "name": "status",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "streamedAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "streamedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newAdmin",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAdmin"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "wasCanceled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMax"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMaxAndTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "streamIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint128[]",
              "name": "amounts",
              "type": "uint128[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMultiple"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "withdrawableAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "withdrawableAmount",
              "type": "uint128"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "MAX_FEE()": {
            "details": "This value is hard coded as a constant."
          },
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the number of tokens in ``owner``'s account."
          },
          "burn(uint256)": {
            "details": "Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.",
            "params": {
              "streamId": "The id of the stream NFT to burn."
            }
          },
          "cancel(uint256)": {
            "details": "Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender` is, and if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).",
            "params": {
              "streamId": "The id of the stream to cancel."
            }
          },
          "cancelMultiple(uint256[])": {
            "details": "Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.",
            "params": {
              "streamIds": "The ids of the streams to cancel."
            }
          },
          "claimProtocolRevenues(address)": {
            "details": "Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "asset": "The contract address of the ERC-20 asset for which to claim protocol revenues."
            }
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "getAsset(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getDepositedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getEndTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getRecipient(uint256)": {
            "details": "Reverts if the NFT has been burned.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getRefundedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getSender(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getStartTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getWithdrawnAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "isCancelable(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isCold(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isDepleted(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isStream(uint256)": {
            "details": "Does not revert if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isWarm(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "name()": {
            "details": "Returns the token collection name."
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "protocolRevenues(address)": {
            "params": {
              "asset": "The contract address of the ERC-20 asset to query."
            }
          },
          "refundableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "renounce(uint256)": {
            "details": "Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.",
            "params": {
              "streamId": "The id of the stream to renounce."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "setComptroller(address)": {
            "details": "Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newComptroller": "The address of the new comptroller contract."
            }
          },
          "setNFTDescriptor(address)": {
            "details": "Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newNFTDescriptor": "The address of the new NFT descriptor contract."
            }
          },
          "statusOf(uint256)": {
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "streamedAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "symbol()": {
            "details": "Returns the token collection symbol."
          },
          "tokenURI(uint256)": {
            "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
          },
          "transferAdmin(address)": {
            "details": "Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newAdmin": "The address of the new admin."
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          },
          "wasCanceled(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "withdraw(uint256,address,uint128)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.",
            "params": {
              "amount": "The amount to withdraw, denoted in units of the asset's decimals.",
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMax(uint256,address)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.",
            "params": {
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "details": "Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.",
            "params": {
              "newRecipient": "The address of the new owner of the stream NFT.",
              "streamId": "The id of the stream NFT to transfer."
            }
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "details": "Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.",
            "params": {
              "amounts": "The amounts to withdraw, denoted in units of the asset's decimals.",
              "streamIds": "The ids of the streams to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MAX_FEE()": {
            "notice": "Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%."
          },
          "admin()": {
            "notice": "The address of the admin account or contract."
          },
          "burn(uint256)": {
            "notice": "Burns the NFT associated with the stream."
          },
          "cancel(uint256)": {
            "notice": "Cancels the stream and refunds any remaining assets to the sender."
          },
          "cancelMultiple(uint256[])": {
            "notice": "Cancels multiple streams and refunds any remaining assets to the sender."
          },
          "claimProtocolRevenues(address)": {
            "notice": "Claims all accumulated protocol revenues for the provided ERC-20 asset."
          },
          "comptroller()": {
            "notice": "Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration."
          },
          "getAsset(uint256)": {
            "notice": "Retrieves the address of the ERC-20 asset used for streaming."
          },
          "getDepositedAmount(uint256)": {
            "notice": "Retrieves the amount deposited in the stream, denoted in units of the asset's decimals."
          },
          "getEndTime(uint256)": {
            "notice": "Retrieves the stream's end time, which is a Unix timestamp."
          },
          "getRecipient(uint256)": {
            "notice": "Retrieves the stream's recipient."
          },
          "getRefundedAmount(uint256)": {
            "notice": "Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled."
          },
          "getSender(uint256)": {
            "notice": "Retrieves the stream's sender."
          },
          "getStartTime(uint256)": {
            "notice": "Retrieves the stream's start time, which is a Unix timestamp."
          },
          "getWithdrawnAmount(uint256)": {
            "notice": "Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals."
          },
          "isCancelable(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`."
          },
          "isCold(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted."
          },
          "isDepleted(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is depleted."
          },
          "isStream(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream exists."
          },
          "isWarm(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming."
          },
          "nextStreamId()": {
            "notice": "Counter for stream ids, used in the create functions."
          },
          "protocolRevenues(address)": {
            "notice": "Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals."
          },
          "refundableAmountOf(uint256)": {
            "notice": "Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals."
          },
          "renounce(uint256)": {
            "notice": "Removes the right of the stream's sender to cancel the stream."
          },
          "setComptroller(address)": {
            "notice": "Assigns a new comptroller contract responsible for the protocol configuration."
          },
          "setNFTDescriptor(address)": {
            "notice": "Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs."
          },
          "statusOf(uint256)": {
            "notice": "Retrieves the stream's status."
          },
          "streamedAmountOf(uint256)": {
            "notice": "Calculates the amount streamed to the recipient, denoted in units of the asset's decimals."
          },
          "transferAdmin(address)": {
            "notice": "Transfers the contract admin to a new address."
          },
          "wasCanceled(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream was canceled."
          },
          "withdraw(uint256,address,uint128)": {
            "notice": "Withdraws the provided amount of assets from the stream to the `to` address."
          },
          "withdrawMax(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the provided address `to`."
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`."
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "notice": "Withdraws assets from streams to the provided address `to`."
          },
          "withdrawableAmountOf(uint256)": {
            "notice": "Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/v2-core/lib/openzeppelin-contracts/contracts/",
        "@prb/math/=lib/v2-core/lib/prb-math/",
        "@prb/test/=lib/v2-core/lib/prb-test/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-deploy-proxy/=lib/forge-deploy/examples/basic/lib/forge-deploy-proxy/src/",
        "forge-deploy/=lib/forge-deploy/contracts/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "prb-math/=lib/v2-core/lib/prb-math/src/",
        "prb-test/=lib/v2-core/lib/prb-test/src/",
        "solady/=lib/v2-core/lib/solady/",
        "solarray/=lib/v2-core/lib/solarray/src/",
        "uniswap-v2-core/=lib/uniswap-v2-core/contracts/",
        "uniswap-v2-periphery/=lib/uniswap-v2-periphery/contracts/",
        "v2-core/=lib/v2-core/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/v2-core/src/interfaces/ISablierV2Lockup.sol": "ISablierV2Lockup"
      },
      "libraries": {}
    },
    "sources": {
      "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9",
        "urls": [
          "bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d",
          "dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x8d4cb0754ee7faf208c69cff231bb75ca4676db78c32e6fd4a06b71b739b3571",
        "urls": [
          "bzz-raw://d66d89d40895a0f68bb82ef5ba6605924e9a37ba4e79e21df2e63afc30916aa7",
          "dweb:/ipfs/QmWAsZysULG6BMRwQjjCeqV1TimAAWGiFC2aAGt3eb6gh6"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x23018238ee951d13a9d7f7d2cd641065752923c0aeede09a58a7f1fabf891d75",
        "urls": [
          "bzz-raw://83a5286e82596aa938b6e38803360ca935b9727dc98f317b318a559ae9f438a5",
          "dweb:/ipfs/QmaBhNbpWZ6JPrfhuqX54DAtZj35yX278vArsNr5WtdXoZ"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x540685d7ece3faa56f38253270ff11b18e63949fb8659c408123b1874674492e",
        "urls": [
          "bzz-raw://5474839e19e2571c52eae3aab1dc6e6edf2b20bbba9895f59db6594a2678a3d5",
          "dweb:/ipfs/QmVHocBeANMkq4TzVM7q9At5NSg1TEpT9D9vgJ5dGcvcPN"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/Common.sol": {
        "keccak256": "0x8c348a8711a5036ca64904ff546fb0c27a11143e3a1c1217ea22e1cebd08b126",
        "urls": [
          "bzz-raw://db9000ccca882c9a4d78cb18b80e10ab6c19a9765cd57638c462b7e526c54a80",
          "dweb:/ipfs/QmYkM5pmgMrjau6YMNrNvrwSBEytc9jT8jGb2YdxhB4woe"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/UD2x18.sol": {
        "keccak256": "0x179b0a5b8df55b8bd0604c4d325e4756891e1cd88a4d92adf1b8630bb4610d6b",
        "urls": [
          "bzz-raw://abcad423258a6122417ba15d59af5bca32bb629df203b664b450d5e0523c8d95",
          "dweb:/ipfs/QmZXFJ9sShEeMz9X4XmmdtrW6zBVB7qUcft4Tfx5sSUHAG"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/UD60x18.sol": {
        "keccak256": "0xdd6ee8bbbb9f4c288aa1455685e0dfd81c54aaec976f05ddf003d2b8f0c89639",
        "urls": [
          "bzz-raw://c574478b6f297ae9236ca342d755f6bb5163a4a2dac7f5f6a09ffb34a55069de",
          "dweb:/ipfs/QmQNfbjhqSwKLusdkhAukxnAMfavWqbBxpQ2MtiZR6LkSk"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/Casting.sol": {
        "keccak256": "0xeb29a206d3c96b2c9b897e4bcec586e2ad6f91825f9e14601d9ee01c24e493ed",
        "urls": [
          "bzz-raw://7279879074ecb41f116f07bb437849f3597a65e44e7facb0d8936e333674537f",
          "dweb:/ipfs/QmTpC8zBrFN7PjPoYBH2RGYWaA6hxaAS9kS9Bwzm7zBogV"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/Constants.sol": {
        "keccak256": "0x309c5b7cda602e140f3f8332d2e449b8abec0fa7bf81b67b9c98e1cf28aa8e8b",
        "urls": [
          "bzz-raw://209d57cfff646b020ed1af00df92f0b5e0a73fdac56fcc7d0ceb5e4365fefaf2",
          "dweb:/ipfs/QmdDtHpQK2sBAugSmuf1iBdZRg35Ygv3vradVhdbhikGUM"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/Errors.sol": {
        "keccak256": "0x72058e9cd109aa432cd8beccbdca9398389599151dc5dbc2d84eeafa289c792c",
        "urls": [
          "bzz-raw://2a85b24b61de3288fdc2ed0bb3acccec390b02b68d15b32c9c8c11aa368f700f",
          "dweb:/ipfs/Qme7iL75jWiTKKRSZt6p3FMtyY2mnoxcdJygS4ycf2m5Qq"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/ValueType.sol": {
        "keccak256": "0xdcde09130ea4ce86fadd88bbdb3e740c69dc86ce5239957694a8343e6ff9644a",
        "urls": [
          "bzz-raw://bbf356aa75e0525e9cf22cccc3151d955a9e78f91eb2c88f2744b09f9ef80079",
          "dweb:/ipfs/QmUMaVrFuidro7TvgGNBdHpFHzSA2DRVsMVAygEdQyL1Ct"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Casting.sol": {
        "keccak256": "0x3a632d2ae4779370b02d4f43a4ec6e3808528c2e09055e803ed87df983cad35e",
        "urls": [
          "bzz-raw://832ec36c135ff7ddb0bd93ca462aea4eb4521f1daddf4107a690e0c7b94214ec",
          "dweb:/ipfs/Qmcj9uXDMVX97wGbu44NDGLdcTCuuVRhPF4vhr3UjjeLrd"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Constants.sol": {
        "keccak256": "0x312e75443376ff6bc05125c16ea1a722a80ed6a6a2a7b020678c38213a70162a",
        "urls": [
          "bzz-raw://a438ac6c4856d78541746484c1a5e1398ff6b505862058c89e90febdffc28f72",
          "dweb:/ipfs/QmYhRQ33bdLWSqbySqKQtu9fzKpQrEXEKzuS1TFwyMtbDg"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Errors.sol": {
        "keccak256": "0x71a19d407221fcea92fcac522d36010ba42c3ce2ed7d4a1eec283bd5ac0cf9e2",
        "urls": [
          "bzz-raw://996ad3941b48e86433352d2ad8b19eafd3ff2454983bd8ffea28d37d6c4447cc",
          "dweb:/ipfs/QmV2VSpQimdngfY5fx8SVARDecJdN19TPjbFckUAAoGcKM"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Helpers.sol": {
        "keccak256": "0xc8b24ba940189a13418aae6c1483a7b9acde1d35a99ee0134f6d58ec05c524c8",
        "urls": [
          "bzz-raw://d71dc8cbded4150cc3db9612123892e4ee79e6a37d106c40f406054ba4035792",
          "dweb:/ipfs/QmeyY1XasbY2iE997mjDyzUKYCfdsppnRQV3FvvYF5uhiw"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Math.sol": {
        "keccak256": "0x561694ead1deae45027c5851c24eab53dc9f8a7eb8c623fdf5eebe56dd9da20a",
        "urls": [
          "bzz-raw://1dc6789db7d57ce54bc82c5aa74623dc12c3e0cafbaf921940788d0f502a66c5",
          "dweb:/ipfs/QmeiDrGFSCGNk99ggThYVE4pEaEAgb4LmxgZZKq4GWS2Sv"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/ValueType.sol": {
        "keccak256": "0xaf4cc89130b6ce22ae7e1d1bd8d912019278d7d9b35e37bb211aa78cc1b7ff32",
        "urls": [
          "bzz-raw://1c535c057358dda38d58c596272ad505811563bcfad51545ae82f0e9d0e39cb9",
          "dweb:/ipfs/QmVDTjMFxzZqtmLEQm55KaPy6hytAqG7Ve2tYzvYCvswcv"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/Casting.sol": {
        "keccak256": "0x395a47779cf0a9358b9998a5ebfc48a0dc07062e4f6a5d3ac536f7870e43691e",
        "urls": [
          "bzz-raw://f626199e5bc02936ac2520ff4d2f26ff318536e83e47b9880f558b85114282d3",
          "dweb:/ipfs/QmaqVnsvezFpoYoYDhFoskKFvUL37DW6Hwry5ktvkX5KvJ"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/Constants.sol": {
        "keccak256": "0xe7cad7b8cb3daa6d124e5b4b9aff8148bb4b573f5ead0b8ffe16f8548c1a8587",
        "urls": [
          "bzz-raw://b8c477fb4a12612276c5746052897fce01cf6ad0f31cc8e6b19b7e125ef41bb5",
          "dweb:/ipfs/QmWENWZ15cTVByU2ixuHbNdk5EjCaawkstTbn7vNnRzZtU"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/Errors.sol": {
        "keccak256": "0x28e16c14bae589f4d257726a7b6d89ec03112712beaf0f91b33c0a188519fe87",
        "urls": [
          "bzz-raw://e80ca782d9ea4e5f1ba02981ec5bba4df740912b192e1a2b119e6fa920c45aea",
          "dweb:/ipfs/QmYhdVYTh67Mbh77aQMHt1UTbJKuuhHeT4nhCbKCAM3HEr"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/ValueType.sol": {
        "keccak256": "0xc8590c817624727ad369239cdf304b71015041714d6bf2f88569797742be628c",
        "urls": [
          "bzz-raw://6e9d4071f4c97d4582e6cc0290254e798593185bc0b0c4d399758677e5253921",
          "dweb:/ipfs/QmUjpqj1Y9wnmgVhtPQXTJ7eW1wwhfaWJbHRCrxZ2niQ3T"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Casting.sol": {
        "keccak256": "0xbdce3b69f27fb198ea084b5df90a83075a61e9fee7021da2e556fa7c8a7574cd",
        "urls": [
          "bzz-raw://0b09c907651b797384f53009e70a11fd6c7a795a85158e872598f13c337500b2",
          "dweb:/ipfs/QmUKCfKrcsbsR1QqhDpsC7NanQhPyuoVa3KS78Lqy83Lfi"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Constants.sol": {
        "keccak256": "0x3d2219fe39162d051d993702598c15a2735784fff0c0d2dadea1b02a51cb20f0",
        "urls": [
          "bzz-raw://176f0175397a2965f2b1380c9f97cdcffdafaa7f2d3585c5db26d61b4902299e",
          "dweb:/ipfs/QmbuGa84ah972Qa2JBFHbE4aLoN6cx1J8hDLztzStGrRMf"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Conversions.sol": {
        "keccak256": "0xa949472633cc36fa8d2714e167ff71b51198358bf3f6117d038350e14f30cec8",
        "urls": [
          "bzz-raw://3f2d3b3631b3b43cd43f3ef41c2912582eb7bd56c83dfab417adf1a7afa81fd4",
          "dweb:/ipfs/QmfDFXkXLYp1skMZ6CBnYkL3aJKdVPfC9SnfcSSwbkJ2Wm"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Errors.sol": {
        "keccak256": "0x3a25f4e18a8a69fa9ac84f826bbfa4b6535788ae9a26623cc848e169e5d842ad",
        "urls": [
          "bzz-raw://8b34b02e146128930fa73b3a2de2f22c27dbf180012096d2602256263fdda18a",
          "dweb:/ipfs/QmQ46FQ2arioGSwAePLiLDGv6CBtkrqdJAifV7MFPqfPPu"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Helpers.sol": {
        "keccak256": "0x24c9c09d2dd73770c516a4f08296aa9e83b6431b52d97990a726c41c8aa2746f",
        "urls": [
          "bzz-raw://e5ec749ccb50bd3420346951875c2a0bb6469e90190c82630de6b2117a8fad29",
          "dweb:/ipfs/QmT4dgxVtbwMbSLyFRXeyYzfda7AvMyRUVZzd6yUS8qr7C"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Math.sol": {
        "keccak256": "0xb9c4ab4753274baf1cc88b90da04b1308445c074eb94d7ab229109d78602497b",
        "urls": [
          "bzz-raw://e80843aeb21429a0c12dfd22f2f1d69478de32b8cb17b312e86fa2b0cfe50f7e",
          "dweb:/ipfs/QmdY293FrZb9KeaHTfq7wMXpQWinqFHhiLaSyQLKNcWs8w"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/ValueType.sol": {
        "keccak256": "0x3a2ada6e87a1c61d3a58e7ff9d5ea9eee00a4cca8b350a9d461e3bb2867693f2",
        "urls": [
          "bzz-raw://021a34174b566e8575ce7f9d8f93f3e96c8fa748192bc5f9b4bdc049ce6675cc",
          "dweb:/ipfs/QmXa6CXbEnf7K64phvDePsjznomBWZMkCg5nGn81KuwFf2"
        ],
        "license": "MIT"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol": {
        "keccak256": "0x289bd3a74cb971dd3928c44d194d9b75939d75494901df32512b5ccbc0ed8cb0",
        "urls": [
          "bzz-raw://634a0098bc40a927bbefe46f6f2d8a5d94f9f92c5bad0149e4c7da67b0731bc7",
          "dweb:/ipfs/QmVsMVaKZ51uG7wyTrcoSMHsMYmVvuCuPnVgNHJfFRKeSQ"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol": {
        "keccak256": "0x7fa3b890885b19de99e290ccd1d90da3d021be70bd4792c582b7f9e451749792",
        "urls": [
          "bzz-raw://5efc3274c9ac532baf96805f127e8b46b7292b12149eca7d830263bbe6ffde95",
          "dweb:/ipfs/QmNZaKcPahmA8juiY42FShVvRn4pktyubP13oyr5p6uCJk"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol": {
        "keccak256": "0x2133c91a65c1cdfa24b0c5b35317848d167436d49ecef4e22b72934f8ed9f2fa",
        "urls": [
          "bzz-raw://f6935d55b1763eeca5e4392542586b2168f100036bcffddd6800cf28aa18052c",
          "dweb:/ipfs/QmRzRxdbcppc1tMv1gQ9NzT5iftEFP8QS57G1RbyAKbyoT"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol": {
        "keccak256": "0xa971017f4caff1aff29e1cfc6edac609d771b967aafb8543104bccdd0a5a77d0",
        "urls": [
          "bzz-raw://cc9319188115a84f87891a8745bf42511fee66c213d97d99d08e35aaa4720d93",
          "dweb:/ipfs/QmeFjJZoKA2wGzVoBdwx8f6baciuKZUBQRYiyo2Moidhic"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol": {
        "keccak256": "0xe7840e59d0ce011e0be119098e82a3b4deb6ca779c816855ebed6a29349fc970",
        "urls": [
          "bzz-raw://733f9f5f21b72b76a121677b5f2dcd113e301408d969b5364d082c7c9dc8fec7",
          "dweb:/ipfs/QmdtUp1Ss4dHBnosNkjT9tCuxJ26UTP5dBxrVEJRZhe76E"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/types/DataTypes.sol": {
        "keccak256": "0x83883c59bf969d1f64d3eaa073c35e3ab4e1cdf5502a3973ba710eb282cbb2b4",
        "urls": [
          "bzz-raw://4616d1730d519454bba426748a9fbf71dd5488c38b6a7584e49f7a669150bfcc",
          "dweb:/ipfs/QmXqLNBS9J3hnuR9bzh8cc4Q63KdLs8M9Ze9F3P2k8rBhL"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol",
    "id": 61253,
    "exportedSymbols": {
      "IERC20": [
        53679
      ],
      "IERC721Metadata": [
        53822
      ],
      "ISablierV2Base": [
        60877
      ],
      "ISablierV2Lockup": [
        61252
      ],
      "ISablierV2NFTDescriptor": [
        61358
      ],
      "Lockup": [
        61398
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:15052:105",
    "nodes": [
      {
        "id": 60976,
        "nodeType": "PragmaDirective",
        "src": "46:25:105",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 60978,
        "nodeType": "ImportDirective",
        "src": "75:72:105",
        "nodes": [],
        "absolutePath": "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61253,
        "sourceUnit": 53680,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60977,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53679,
              "src": "84:6:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60980,
        "nodeType": "ImportDirective",
        "src": "149:102:105",
        "nodes": [],
        "absolutePath": "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61253,
        "sourceUnit": 53823,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60979,
              "name": "IERC721Metadata",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53822,
              "src": "158:15:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60982,
        "nodeType": "ImportDirective",
        "src": "255:48:105",
        "nodes": [],
        "absolutePath": "lib/v2-core/src/types/DataTypes.sol",
        "file": "../types/DataTypes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61253,
        "sourceUnit": 61571,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60981,
              "name": "Lockup",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 61398,
              "src": "264:6:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60984,
        "nodeType": "ImportDirective",
        "src": "305:54:105",
        "nodes": [],
        "absolutePath": "lib/v2-core/src/interfaces/ISablierV2Base.sol",
        "file": "./ISablierV2Base.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61253,
        "sourceUnit": 60878,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60983,
              "name": "ISablierV2Base",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 60877,
              "src": "314:14:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 60986,
        "nodeType": "ImportDirective",
        "src": "361:72:105",
        "nodes": [],
        "absolutePath": "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol",
        "file": "./ISablierV2NFTDescriptor.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61253,
        "sourceUnit": 61359,
        "symbolAliases": [
          {
            "foreign": {
              "id": 60985,
              "name": "ISablierV2NFTDescriptor",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 61358,
              "src": "370:23:105",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61252,
        "nodeType": "ContractDefinition",
        "src": "543:14553:105",
        "nodes": [
          {
            "id": 61004,
            "nodeType": "EventDefinition",
            "src": "1393:201:105",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 60992,
              "nodeType": "StructuredDocumentation",
              "src": "887:500:105",
              "text": "@notice Emitted when a stream is canceled.\n @param streamId The id of the stream.\n @param sender The address of the stream's sender.\n @param recipient The address of the stream's recipient.\n @param senderAmount The amount of assets refunded to the stream's sender, denoted in units of the asset's\n decimals.\n @param recipientAmount The amount of assets left for the stream's recipient to withdraw, denoted in units of the\n asset's decimals."
            },
            "eventSelector": "2971bd77136e1a620a6b1eb4ad5edd190e9fd391b26bfc5dea50b882fc6b9fd2",
            "name": "CancelLockupStream",
            "nameLocation": "1399:18:105",
            "parameters": {
              "id": 61003,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 60994,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "1444:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61004,
                  "src": "1428:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 60993,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1428:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60996,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "1479:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61004,
                  "src": "1463:22:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 60995,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1463:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 60998,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "1512:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61004,
                  "src": "1496:25:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 60997,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1496:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61000,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "senderAmount",
                  "nameLocation": "1540:12:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61004,
                  "src": "1532:20:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 60999,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1532:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61002,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "recipientAmount",
                  "nameLocation": "1571:15:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61004,
                  "src": "1563:23:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61001,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1563:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1417:176:105"
            }
          },
          {
            "id": 61009,
            "nodeType": "EventDefinition",
            "src": "1727:53:105",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 61005,
              "nodeType": "StructuredDocumentation",
              "src": "1602:119:105",
              "text": "@notice Emitted when a sender gives up the right to cancel a stream.\n @param streamId The id of the stream."
            },
            "eventSelector": "0eb069207093cd3e51cd1370d2d369770057fbe29947e577e5fb428c6c6fc78f",
            "name": "RenounceLockupStream",
            "nameLocation": "1733:20:105",
            "parameters": {
              "id": 61008,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61007,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "1770:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61009,
                  "src": "1754:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61006,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1754:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1753:26:105"
            }
          },
          {
            "id": 61020,
            "nodeType": "EventDefinition",
            "src": "2091:146:105",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 61010,
              "nodeType": "StructuredDocumentation",
              "src": "1788:297:105",
              "text": "@notice Emitted when the admin sets a new NFT descriptor contract.\n @param admin The address of the current contract admin.\n @param oldNFTDescriptor The address of the old NFT descriptor contract.\n @param newNFTDescriptor The address of the new NFT descriptor contract."
            },
            "eventSelector": "a2548bd4b805e907c1558a47b5858324fe8bb4a2e1ddfca647eecbf65610eebc",
            "name": "SetNFTDescriptor",
            "nameLocation": "2097:16:105",
            "parameters": {
              "id": 61019,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61012,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "admin",
                  "nameLocation": "2140:5:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61020,
                  "src": "2124:21:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61011,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2124:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61015,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldNFTDescriptor",
                  "nameLocation": "2171:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61020,
                  "src": "2147:40:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$61358",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 61014,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61013,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": [
                        "2147:23:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61358,
                      "src": "2147:23:105"
                    },
                    "referencedDeclaration": 61358,
                    "src": "2147:23:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$61358",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61018,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newNFTDescriptor",
                  "nameLocation": "2213:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61020,
                  "src": "2189:40:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$61358",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 61017,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61016,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": [
                        "2189:23:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61358,
                      "src": "2189:23:105"
                    },
                    "referencedDeclaration": 61358,
                    "src": "2189:23:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$61358",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2113:123:105"
            }
          },
          {
            "id": 61029,
            "nodeType": "EventDefinition",
            "src": "2526:93:105",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 61021,
              "nodeType": "StructuredDocumentation",
              "src": "2245:275:105",
              "text": "@notice Emitted when assets are withdrawn from a stream.\n @param streamId The id of the stream.\n @param to The address that has received the withdrawn assets.\n @param amount The amount of assets withdrawn, denoted in units of the asset's decimals."
            },
            "eventSelector": "fa54f9f9bdcdd28778cbb9f78490df6691cc4e2729588e10f4cc0a26c465686a",
            "name": "WithdrawFromLockupStream",
            "nameLocation": "2532:24:105",
            "parameters": {
              "id": 61028,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61023,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "2573:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61029,
                  "src": "2557:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61022,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2557:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61025,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2599:2:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61029,
                  "src": "2583:18:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61024,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2583:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61027,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2611:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61029,
                  "src": "2603:14:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61026,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "2603:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2556:62:105"
            }
          },
          {
            "id": 61038,
            "nodeType": "FunctionDefinition",
            "src": "3041:73:105",
            "nodes": [],
            "documentation": {
              "id": 61030,
              "nodeType": "StructuredDocumentation",
              "src": "2846:189:105",
              "text": "@notice Retrieves the address of the ERC-20 asset used for streaming.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "eac8f5b8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAsset",
            "nameLocation": "3050:8:105",
            "parameters": {
              "id": 61033,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61032,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3067:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61038,
                  "src": "3059:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61031,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3059:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3058:18:105"
            },
            "returnParameters": {
              "id": 61037,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61036,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "3107:5:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61038,
                  "src": "3100:12:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$53679",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 61035,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61034,
                      "name": "IERC20",
                      "nameLocations": [
                        "3100:6:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 53679,
                      "src": "3100:6:105"
                    },
                    "referencedDeclaration": 53679,
                    "src": "3100:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$53679",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3099:14:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61046,
            "nodeType": "FunctionDefinition",
            "src": "3343:94:105",
            "nodes": [],
            "documentation": {
              "id": 61039,
              "nodeType": "StructuredDocumentation",
              "src": "3122:215:105",
              "text": "@notice Retrieves the amount deposited in the stream, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "a80fc071",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDepositedAmount",
            "nameLocation": "3352:18:105",
            "parameters": {
              "id": 61042,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61041,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3379:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61046,
                  "src": "3371:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61040,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3371:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3370:18:105"
            },
            "returnParameters": {
              "id": 61045,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61044,
                  "mutability": "mutable",
                  "name": "depositedAmount",
                  "nameLocation": "3420:15:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61046,
                  "src": "3412:23:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61043,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3412:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3411:25:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61054,
            "nodeType": "FunctionDefinition",
            "src": "3638:77:105",
            "nodes": [],
            "documentation": {
              "id": 61047,
              "nodeType": "StructuredDocumentation",
              "src": "3445:187:105",
              "text": "@notice Retrieves the stream's end time, which is a Unix timestamp.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "9067b677",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getEndTime",
            "nameLocation": "3647:10:105",
            "parameters": {
              "id": 61050,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61049,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3666:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61054,
                  "src": "3658:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61048,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3658:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3657:18:105"
            },
            "returnParameters": {
              "id": 61053,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61052,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "3706:7:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61054,
                  "src": "3699:14:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 61051,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "3699:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3698:16:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61062,
            "nodeType": "FunctionDefinition",
            "src": "3878:82:105",
            "nodes": [],
            "documentation": {
              "id": 61055,
              "nodeType": "StructuredDocumentation",
              "src": "3723:149:105",
              "text": "@notice Retrieves the stream's recipient.\n @dev Reverts if the NFT has been burned.\n @param streamId The stream id for the query."
            },
            "functionSelector": "6d0cee75",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRecipient",
            "nameLocation": "3887:12:105",
            "parameters": {
              "id": 61058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61057,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3908:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61062,
                  "src": "3900:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61056,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3900:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3899:18:105"
            },
            "returnParameters": {
              "id": 61061,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61060,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3949:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61062,
                  "src": "3941:17:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61059,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3941:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3940:19:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61070,
            "nodeType": "FunctionDefinition",
            "src": "4277:92:105",
            "nodes": [],
            "documentation": {
              "id": 61063,
              "nodeType": "StructuredDocumentation",
              "src": "3968:303:105",
              "text": "@notice Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's\n decimals. This amount is always zero unless the stream was canceled.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d4dbd20b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRefundedAmount",
            "nameLocation": "4286:17:105",
            "parameters": {
              "id": 61066,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61065,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4312:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61070,
                  "src": "4304:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61064,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4304:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4303:18:105"
            },
            "returnParameters": {
              "id": 61069,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61068,
                  "mutability": "mutable",
                  "name": "refundedAmount",
                  "nameLocation": "4353:14:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61070,
                  "src": "4345:22:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61067,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "4345:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4344:24:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61078,
            "nodeType": "FunctionDefinition",
            "src": "4541:76:105",
            "nodes": [],
            "documentation": {
              "id": 61071,
              "nodeType": "StructuredDocumentation",
              "src": "4377:158:105",
              "text": "@notice Retrieves the stream's sender.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "b971302a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSender",
            "nameLocation": "4550:9:105",
            "parameters": {
              "id": 61074,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61073,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4568:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61078,
                  "src": "4560:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61072,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4560:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4559:18:105"
            },
            "returnParameters": {
              "id": 61077,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61076,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "4609:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61078,
                  "src": "4601:14:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61075,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4601:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4600:16:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61086,
            "nodeType": "FunctionDefinition",
            "src": "4820:81:105",
            "nodes": [],
            "documentation": {
              "id": 61079,
              "nodeType": "StructuredDocumentation",
              "src": "4625:189:105",
              "text": "@notice Retrieves the stream's start time, which is a Unix timestamp.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "bc2be1be",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStartTime",
            "nameLocation": "4829:12:105",
            "parameters": {
              "id": 61082,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61081,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4850:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61086,
                  "src": "4842:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61080,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4842:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4841:18:105"
            },
            "returnParameters": {
              "id": 61085,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61084,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "4890:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61086,
                  "src": "4883:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 61083,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "4883:6:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4882:18:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61094,
            "nodeType": "FunctionDefinition",
            "src": "5132:94:105",
            "nodes": [],
            "documentation": {
              "id": 61087,
              "nodeType": "StructuredDocumentation",
              "src": "4909:217:105",
              "text": "@notice Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d511609f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getWithdrawnAmount",
            "nameLocation": "5141:18:105",
            "parameters": {
              "id": 61090,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61089,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5168:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61094,
                  "src": "5160:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61088,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5160:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5159:18:105"
            },
            "returnParameters": {
              "id": 61093,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61092,
                  "mutability": "mutable",
                  "name": "withdrawnAmount",
                  "nameLocation": "5209:15:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61094,
                  "src": "5201:23:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61091,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "5201:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5200:25:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61102,
            "nodeType": "FunctionDefinition",
            "src": "5494:76:105",
            "nodes": [],
            "documentation": {
              "id": 61095,
              "nodeType": "StructuredDocumentation",
              "src": "5234:254:105",
              "text": "@notice Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this\n flag is always `false`.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "4857501f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCancelable",
            "nameLocation": "5503:12:105",
            "parameters": {
              "id": 61098,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61097,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5524:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61102,
                  "src": "5516:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61096,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5516:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5515:18:105"
            },
            "returnParameters": {
              "id": 61101,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61100,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "5562:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61102,
                  "src": "5557:11:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61099,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5557:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5556:13:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61110,
            "nodeType": "FunctionDefinition",
            "src": "5804:70:105",
            "nodes": [],
            "documentation": {
              "id": 61103,
              "nodeType": "StructuredDocumentation",
              "src": "5578:220:105",
              "text": "@notice Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "8f69b993",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isCold",
            "nameLocation": "5813:6:105",
            "parameters": {
              "id": 61106,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61105,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "5828:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61110,
                  "src": "5820:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61104,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5820:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5819:18:105"
            },
            "returnParameters": {
              "id": 61109,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61108,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "5866:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61110,
                  "src": "5861:11:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61107,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5861:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5860:13:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61118,
            "nodeType": "FunctionDefinition",
            "src": "6075:74:105",
            "nodes": [],
            "documentation": {
              "id": 61111,
              "nodeType": "StructuredDocumentation",
              "src": "5882:187:105",
              "text": "@notice Retrieves a flag indicating whether the stream is depleted.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "425d30dd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isDepleted",
            "nameLocation": "6084:10:105",
            "parameters": {
              "id": 61114,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61113,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6103:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61118,
                  "src": "6095:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61112,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6095:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6094:18:105"
            },
            "returnParameters": {
              "id": 61117,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61116,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6141:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61118,
                  "src": "6136:11:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61115,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6136:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6135:13:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61126,
            "nodeType": "FunctionDefinition",
            "src": "6353:72:105",
            "nodes": [],
            "documentation": {
              "id": 61119,
              "nodeType": "StructuredDocumentation",
              "src": "6157:190:105",
              "text": "@notice Retrieves a flag indicating whether the stream exists.\n @dev Does not revert if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "b8a3be66",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isStream",
            "nameLocation": "6362:8:105",
            "parameters": {
              "id": 61122,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61121,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6379:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61126,
                  "src": "6371:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61120,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6371:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6370:18:105"
            },
            "returnParameters": {
              "id": 61125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61124,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6417:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61126,
                  "src": "6412:11:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61123,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6412:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6411:13:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61134,
            "nodeType": "FunctionDefinition",
            "src": "6656:70:105",
            "nodes": [],
            "documentation": {
              "id": 61127,
              "nodeType": "StructuredDocumentation",
              "src": "6433:217:105",
              "text": "@notice Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "1c1cdd4c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isWarm",
            "nameLocation": "6665:6:105",
            "parameters": {
              "id": 61130,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61129,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6680:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61134,
                  "src": "6672:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61128,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6672:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6671:18:105"
            },
            "returnParameters": {
              "id": 61133,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61132,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "6718:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61134,
                  "src": "6713:11:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61131,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6713:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6712:13:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61140,
            "nodeType": "FunctionDefinition",
            "src": "6805:56:105",
            "nodes": [],
            "documentation": {
              "id": 61135,
              "nodeType": "StructuredDocumentation",
              "src": "6734:65:105",
              "text": "@notice Counter for stream ids, used in the create functions."
            },
            "functionSelector": "1e99d569",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "nextStreamId",
            "nameLocation": "6814:12:105",
            "parameters": {
              "id": 61136,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6826:2:105"
            },
            "returnParameters": {
              "id": 61139,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61138,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 61140,
                  "src": "6852:7:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61137,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6852:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6851:9:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61148,
            "nodeType": "FunctionDefinition",
            "src": "7138:95:105",
            "nodes": [],
            "documentation": {
              "id": 61141,
              "nodeType": "StructuredDocumentation",
              "src": "6869:263:105",
              "text": "@notice Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units\n of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "1400ecec",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "refundableAmountOf",
            "nameLocation": "7147:18:105",
            "parameters": {
              "id": 61144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61143,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7174:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61148,
                  "src": "7166:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61142,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7166:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7165:18:105"
            },
            "returnParameters": {
              "id": 61147,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61146,
                  "mutability": "mutable",
                  "name": "refundableAmount",
                  "nameLocation": "7215:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61148,
                  "src": "7207:24:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61145,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "7207:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7206:26:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61157,
            "nodeType": "FunctionDefinition",
            "src": "7343:81:105",
            "nodes": [],
            "documentation": {
              "id": 61149,
              "nodeType": "StructuredDocumentation",
              "src": "7241:96:105",
              "text": "@notice Retrieves the stream's status.\n @param streamId The stream id for the query."
            },
            "functionSelector": "ad35efd4",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "statusOf",
            "nameLocation": "7352:8:105",
            "parameters": {
              "id": 61152,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61151,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7369:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61157,
                  "src": "7361:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61150,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7361:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7360:18:105"
            },
            "returnParameters": {
              "id": 61156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61155,
                  "mutability": "mutable",
                  "name": "status",
                  "nameLocation": "7416:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61157,
                  "src": "7402:20:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_Status_$61397",
                    "typeString": "enum Lockup.Status"
                  },
                  "typeName": {
                    "id": 61154,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61153,
                      "name": "Lockup.Status",
                      "nameLocations": [
                        "7402:6:105",
                        "7409:6:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61397,
                      "src": "7402:13:105"
                    },
                    "referencedDeclaration": 61397,
                    "src": "7402:13:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$61397",
                      "typeString": "enum Lockup.Status"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7401:22:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61165,
            "nodeType": "FunctionDefinition",
            "src": "7656:91:105",
            "nodes": [],
            "documentation": {
              "id": 61158,
              "nodeType": "StructuredDocumentation",
              "src": "7432:218:105",
              "text": "@notice Calculates the amount streamed to the recipient, denoted in units of the asset's decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "4869e12d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "streamedAmountOf",
            "nameLocation": "7665:16:105",
            "parameters": {
              "id": 61161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61160,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7690:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61165,
                  "src": "7682:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61159,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7682:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7681:18:105"
            },
            "returnParameters": {
              "id": 61164,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61163,
                  "mutability": "mutable",
                  "name": "streamedAmount",
                  "nameLocation": "7731:14:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61165,
                  "src": "7723:22:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61162,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "7723:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7722:24:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61173,
            "nodeType": "FunctionDefinition",
            "src": "7949:75:105",
            "nodes": [],
            "documentation": {
              "id": 61166,
              "nodeType": "StructuredDocumentation",
              "src": "7755:188:105",
              "text": "@notice Retrieves a flag indicating whether the stream was canceled.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "f590c176",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wasCanceled",
            "nameLocation": "7958:11:105",
            "parameters": {
              "id": 61169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61168,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "7978:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61173,
                  "src": "7970:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61167,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7970:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7969:18:105"
            },
            "returnParameters": {
              "id": 61172,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61171,
                  "mutability": "mutable",
                  "name": "result",
                  "nameLocation": "8016:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61173,
                  "src": "8011:11:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61170,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8011:4:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8010:13:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61181,
            "nodeType": "FunctionDefinition",
            "src": "8287:99:105",
            "nodes": [],
            "documentation": {
              "id": 61174,
              "nodeType": "StructuredDocumentation",
              "src": "8032:249:105",
              "text": "@notice Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's\n decimals.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "d975dfed",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawableAmountOf",
            "nameLocation": "8296:20:105",
            "parameters": {
              "id": 61177,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61176,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "8325:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61181,
                  "src": "8317:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61175,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8317:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8316:18:105"
            },
            "returnParameters": {
              "id": 61180,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61179,
                  "mutability": "mutable",
                  "name": "withdrawableAmount",
                  "nameLocation": "8366:18:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61181,
                  "src": "8358:26:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61178,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "8358:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8357:28:105"
            },
            "scope": 61252,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61187,
            "nodeType": "FunctionDefinition",
            "src": "9031:41:105",
            "nodes": [],
            "documentation": {
              "id": 61182,
              "nodeType": "StructuredDocumentation",
              "src": "8615:410:105",
              "text": "@notice Burns the NFT associated with the stream.\n @dev Emits a {Transfer} event.\n Requirements:\n - Must not be delegate called.\n - `streamId` must reference a depleted stream.\n - The NFT must exist.\n - `msg.sender` must be either the NFT owner or an approved third party.\n @param streamId The id of the stream NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "9040:4:105",
            "parameters": {
              "id": 61185,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61184,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "9053:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61187,
                  "src": "9045:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61183,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9045:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9044:18:105"
            },
            "returnParameters": {
              "id": 61186,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9071:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61193,
            "nodeType": "FunctionDefinition",
            "src": "9909:43:105",
            "nodes": [],
            "documentation": {
              "id": 61188,
              "nodeType": "StructuredDocumentation",
              "src": "9080:823:105",
              "text": "@notice Cancels the stream and refunds any remaining assets to the sender.\n @dev Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event.\n Notes:\n - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the\n stream is marked as depleted.\n - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender`\n is, and if the resolved address is a contract.\n Requirements:\n - Must not be delegate called.\n - The stream must be warm and cancelable.\n - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).\n @param streamId The id of the stream to cancel."
            },
            "functionSelector": "40e58ee5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancel",
            "nameLocation": "9918:6:105",
            "parameters": {
              "id": 61191,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61190,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "9933:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61193,
                  "src": "9925:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61189,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9925:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9924:18:105"
            },
            "returnParameters": {
              "id": 61192,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9951:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61200,
            "nodeType": "FunctionDefinition",
            "src": "10391:63:105",
            "nodes": [],
            "documentation": {
              "id": 61194,
              "nodeType": "StructuredDocumentation",
              "src": "9960:425:105",
              "text": "@notice Cancels multiple streams and refunds any remaining assets to the sender.\n @dev Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events.\n Notes:\n - Refer to the notes in {cancel}.\n Requirements:\n - All requirements from {cancel} must be met for each stream.\n @param streamIds The ids of the streams to cancel."
            },
            "functionSelector": "8659c270",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelMultiple",
            "nameLocation": "10400:14:105",
            "parameters": {
              "id": 61198,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61197,
                  "mutability": "mutable",
                  "name": "streamIds",
                  "nameLocation": "10434:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61200,
                  "src": "10415:28:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61195,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "10415:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 61196,
                    "nodeType": "ArrayTypeName",
                    "src": "10415:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10414:30:105"
            },
            "returnParameters": {
              "id": 61199,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10453:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61206,
            "nodeType": "FunctionDefinition",
            "src": "11103:45:105",
            "nodes": [],
            "documentation": {
              "id": 61201,
              "nodeType": "StructuredDocumentation",
              "src": "10462:635:105",
              "text": "@notice Removes the right of the stream's sender to cancel the stream.\n @dev Emits a {RenounceLockupStream} and {MetadataUpdate} event.\n Notes:\n - This is an irreversible operation.\n - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract.\n Requirements:\n - Must not be delegate called.\n - `streamId` must reference a warm stream.\n - `msg.sender` must be the stream's sender.\n - The stream must be cancelable.\n @param streamId The id of the stream to renounce."
            },
            "functionSelector": "7de6b1db",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "renounce",
            "nameLocation": "11112:8:105",
            "parameters": {
              "id": 61204,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61203,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "11129:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61206,
                  "src": "11121:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61202,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11121:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11120:18:105"
            },
            "returnParameters": {
              "id": 61205,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11147:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61213,
            "nodeType": "FunctionDefinition",
            "src": "11612:77:105",
            "nodes": [],
            "documentation": {
              "id": 61207,
              "nodeType": "StructuredDocumentation",
              "src": "11156:450:105",
              "text": "@notice Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs.\n @dev Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event.\n Notes:\n - Does not revert if the NFT descriptor is the same.\n Requirements:\n - `msg.sender` must be the contract admin.\n @param newNFTDescriptor The address of the new NFT descriptor contract."
            },
            "functionSelector": "7cad6cd1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setNFTDescriptor",
            "nameLocation": "11621:16:105",
            "parameters": {
              "id": 61211,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61210,
                  "mutability": "mutable",
                  "name": "newNFTDescriptor",
                  "nameLocation": "11662:16:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61213,
                  "src": "11638:40:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$61358",
                    "typeString": "contract ISablierV2NFTDescriptor"
                  },
                  "typeName": {
                    "id": 61209,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61208,
                      "name": "ISablierV2NFTDescriptor",
                      "nameLocations": [
                        "11638:23:105"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61358,
                      "src": "11638:23:105"
                    },
                    "referencedDeclaration": 61358,
                    "src": "11638:23:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISablierV2NFTDescriptor_$61358",
                      "typeString": "contract ISablierV2NFTDescriptor"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11637:42:105"
            },
            "returnParameters": {
              "id": 61212,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11688:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61223,
            "nodeType": "FunctionDefinition",
            "src": "12791:73:105",
            "nodes": [],
            "documentation": {
              "id": 61214,
              "nodeType": "StructuredDocumentation",
              "src": "11697:1088:105",
              "text": "@notice Withdraws the provided amount of assets from the stream to the `to` address.\n @dev Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event.\n Notes:\n - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract\n and `msg.sender` is either the sender or an approved operator.\n Requirements:\n - Must not be delegate called.\n - `streamId` must not reference a null or depleted stream.\n - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party.\n - `to` must be the recipient if `msg.sender` is the stream's sender.\n - `to` must not be the zero address.\n - `amount` must be greater than zero and must not exceed the withdrawable amount.\n @param streamId The id of the stream to withdraw from.\n @param to The address receiving the withdrawn assets.\n @param amount The amount to withdraw, denoted in units of the asset's decimals."
            },
            "functionSelector": "fdd46d60",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "12800:8:105",
            "parameters": {
              "id": 61221,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61216,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "12817:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61223,
                  "src": "12809:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61215,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "12809:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61218,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "12835:2:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61223,
                  "src": "12827:10:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61217,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12827:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61220,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "12847:6:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61223,
                  "src": "12839:14:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61219,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "12839:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12808:46:105"
            },
            "returnParameters": {
              "id": 61222,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12863:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61231,
            "nodeType": "FunctionDefinition",
            "src": "13366:60:105",
            "nodes": [],
            "documentation": {
              "id": 61224,
              "nodeType": "StructuredDocumentation",
              "src": "12872:488:105",
              "text": "@notice Withdraws the maximum withdrawable amount from the stream to the provided address `to`.\n @dev Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event.\n Notes:\n - Refer to the notes in {withdraw}.\n Requirements:\n - Refer to the requirements in {withdraw}.\n @param streamId The id of the stream to withdraw from.\n @param to The address receiving the withdrawn assets."
            },
            "functionSelector": "ea5ead19",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMax",
            "nameLocation": "13375:11:105",
            "parameters": {
              "id": 61229,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61226,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "13395:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61231,
                  "src": "13387:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61225,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13387:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61228,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "13413:2:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61231,
                  "src": "13405:10:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61227,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "13405:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13386:30:105"
            },
            "returnParameters": {
              "id": 61230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "13425:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61239,
            "nodeType": "FunctionDefinition",
            "src": "14164:81:105",
            "nodes": [],
            "documentation": {
              "id": 61232,
              "nodeType": "StructuredDocumentation",
              "src": "13434:724:105",
              "text": "@notice Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the\n NFT to `newRecipient`.\n @dev Emits a {WithdrawFromLockupStream} and a {Transfer} event.\n Notes:\n - If the withdrawable amount is zero, the withdrawal is skipped.\n - Refer to the notes in {withdraw}.\n Requirements:\n - `msg.sender` must be the stream's recipient.\n - Refer to the requirements in {withdraw}.\n - Refer to the requirements in {IERC721.transferFrom}.\n @param streamId The id of the stream NFT to transfer.\n @param newRecipient The address of the new owner of the stream NFT."
            },
            "functionSelector": "c156a11d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMaxAndTransfer",
            "nameLocation": "14173:22:105",
            "parameters": {
              "id": 61237,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61234,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "14204:8:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61239,
                  "src": "14196:16:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61233,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "14196:7:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61236,
                  "mutability": "mutable",
                  "name": "newRecipient",
                  "nameLocation": "14222:12:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61239,
                  "src": "14214:20:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61235,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14214:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14195:40:105"
            },
            "returnParameters": {
              "id": 61238,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "14244:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61251,
            "nodeType": "FunctionDefinition",
            "src": "14988:105:105",
            "nodes": [],
            "documentation": {
              "id": 61240,
              "nodeType": "StructuredDocumentation",
              "src": "14253:729:105",
              "text": "@notice Withdraws assets from streams to the provided address `to`.\n @dev Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events.\n Notes:\n - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient.\n Requirements:\n - All requirements from {withdraw} must be met for each stream.\n - There must be an equal number of `streamIds` and `amounts`.\n @param streamIds The ids of the streams to withdraw from.\n @param to The address receiving the withdrawn assets.\n @param amounts The amounts to withdraw, denoted in units of the asset's decimals."
            },
            "functionSelector": "a2ffb897",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawMultiple",
            "nameLocation": "14997:16:105",
            "parameters": {
              "id": 61249,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61243,
                  "mutability": "mutable",
                  "name": "streamIds",
                  "nameLocation": "15033:9:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61251,
                  "src": "15014:28:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61241,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "15014:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 61242,
                    "nodeType": "ArrayTypeName",
                    "src": "15014:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61245,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "15052:2:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61251,
                  "src": "15044:10:105",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61244,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15044:7:105",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61248,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "15075:7:105",
                  "nodeType": "VariableDeclaration",
                  "scope": 61251,
                  "src": "15056:26:105",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint128_$dyn_calldata_ptr",
                    "typeString": "uint128[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 61246,
                      "name": "uint128",
                      "nodeType": "ElementaryTypeName",
                      "src": "15056:7:105",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      }
                    },
                    "id": 61247,
                    "nodeType": "ArrayTypeName",
                    "src": "15056:9:105",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint128_$dyn_storage_ptr",
                      "typeString": "uint128[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15013:70:105"
            },
            "returnParameters": {
              "id": 61250,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "15092:0:105"
            },
            "scope": 61252,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 60988,
              "name": "ISablierV2Base",
              "nameLocations": [
                "578:14:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 60877,
              "src": "578:14:105"
            },
            "id": 60989,
            "nodeType": "InheritanceSpecifier",
            "src": "578:14:105"
          },
          {
            "baseName": {
              "id": 60990,
              "name": "IERC721Metadata",
              "nameLocations": [
                "624:15:105"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 53822,
              "src": "624:15:105"
            },
            "id": 60991,
            "nodeType": "InheritanceSpecifier",
            "src": "624:15:105"
          }
        ],
        "canonicalName": "ISablierV2Lockup",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 60987,
          "nodeType": "StructuredDocumentation",
          "src": "437:106:105",
          "text": "@title ISablierV2Lockup\n @notice Common logic between all Sablier V2 lockup streaming contracts."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          61252,
          53822,
          53795,
          53834,
          60877,
          60805
        ],
        "name": "ISablierV2Lockup",
        "nameLocation": "553:16:105",
        "scope": 61253,
        "usedErrors": [],
        "usedEvents": [
          53694,
          53703,
          53712,
          60792,
          60828,
          60839,
          61004,
          61009,
          61020,
          61029
        ]
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 105
}