{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "senderAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "recipientAmount",
          "type": "uint128"
        }
      ],
      "name": "CancelLockupStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "protocolRevenues",
          "type": "uint128"
        }
      ],
      "name": "ClaimProtocolRevenues",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "deposit",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "protocolFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "brokerFee",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct Lockup.CreateAmounts",
          "name": "amounts",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "cancelable",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "start",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "cliff",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "end",
              "type": "uint40"
            }
          ],
          "indexed": false,
          "internalType": "struct LockupLinear.Range",
          "name": "range",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "broker",
          "type": "address"
        }
      ],
      "name": "CreateLockupLinearStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "RenounceLockupStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2Comptroller",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "SetComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "oldNFTDescriptor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "newNFTDescriptor",
          "type": "address"
        }
      ],
      "name": "SetNFTDescriptor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "TransferAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "WithdrawFromLockupStream",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "UD60x18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "claimProtocolRevenues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ISablierV2Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "cancelable",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "cliff",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "total",
                  "type": "uint40"
                }
              ],
              "internalType": "struct LockupLinear.Durations",
              "name": "durations",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "UD60x18",
                  "name": "fee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Broker",
              "name": "broker",
              "type": "tuple"
            }
          ],
          "internalType": "struct LockupLinear.CreateWithDurations",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createWithDurations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "totalAmount",
              "type": "uint128"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "cancelable",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint40",
                  "name": "start",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "cliff",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "end",
                  "type": "uint40"
                }
              ],
              "internalType": "struct LockupLinear.Range",
              "name": "range",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "UD60x18",
                  "name": "fee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Broker",
              "name": "broker",
              "type": "tuple"
            }
          ],
          "internalType": "struct LockupLinear.CreateWithRange",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createWithRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getCliffTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "cliffTime",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getDepositedAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "depositedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getEndTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "endTime",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "start",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "cliff",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "end",
              "type": "uint40"
            }
          ],
          "internalType": "struct LockupLinear.Range",
          "name": "range",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRefundedAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "refundedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStartTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "startTime",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "startTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "cliffTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isCancelable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "wasCanceled",
              "type": "bool"
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint40",
              "name": "endTime",
              "type": "uint40"
            },
            {
              "internalType": "bool",
              "name": "isDepleted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isStream",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint128",
                  "name": "deposited",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "withdrawn",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "refunded",
                  "type": "uint128"
                }
              ],
              "internalType": "struct Lockup.Amounts",
              "name": "amounts",
              "type": "tuple"
            }
          ],
          "internalType": "struct LockupLinear.Stream",
          "name": "stream",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getWithdrawnAmount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawnAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isCancelable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isCold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isDepleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "isWarm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStreamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "protocolRevenues",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "revenues",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "refundableAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "refundableAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "renounce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISablierV2Comptroller",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "setComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISablierV2NFTDescriptor",
          "name": "newNFTDescriptor",
          "type": "address"
        }
      ],
      "name": "setNFTDescriptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "statusOf",
      "outputs": [
        {
          "internalType": "enum Lockup.Status",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "streamedAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "streamedAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "wasCanceled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawMaxAndTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint128[]",
          "name": "amounts",
          "type": "uint128[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "withdrawableAmountOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "withdrawableAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "MAX_FEE()": "bc063e1a",
    "admin()": "f851a440",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "cancel(uint256)": "40e58ee5",
    "cancelMultiple(uint256[])": "8659c270",
    "claimProtocolRevenues(address)": "a6202bf2",
    "comptroller()": "5fe3b567",
    "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))": "1b4103a9",
    "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))": "4bc78b73",
    "getApproved(uint256)": "081812fc",
    "getAsset(uint256)": "eac8f5b8",
    "getCliffTime(uint256)": "780a82c8",
    "getDepositedAmount(uint256)": "a80fc071",
    "getEndTime(uint256)": "9067b677",
    "getRange(uint256)": "cc364f48",
    "getRecipient(uint256)": "6d0cee75",
    "getRefundedAmount(uint256)": "d4dbd20b",
    "getSender(uint256)": "b971302a",
    "getStartTime(uint256)": "bc2be1be",
    "getStream(uint256)": "894e9a0d",
    "getWithdrawnAmount(uint256)": "d511609f",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isCancelable(uint256)": "4857501f",
    "isCold(uint256)": "8f69b993",
    "isDepleted(uint256)": "425d30dd",
    "isStream(uint256)": "b8a3be66",
    "isWarm(uint256)": "1c1cdd4c",
    "name()": "06fdde03",
    "nextStreamId()": "1e99d569",
    "ownerOf(uint256)": "6352211e",
    "protocolRevenues(address)": "39a73c03",
    "refundableAmountOf(uint256)": "1400ecec",
    "renounce(uint256)": "7de6b1db",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setComptroller(address)": "8bad38dd",
    "setNFTDescriptor(address)": "7cad6cd1",
    "statusOf(uint256)": "ad35efd4",
    "streamedAmountOf(uint256)": "4869e12d",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "transferAdmin(address)": "75829def",
    "transferFrom(address,address,uint256)": "23b872dd",
    "wasCanceled(uint256)": "f590c176",
    "withdraw(uint256,address,uint128)": "fdd46d60",
    "withdrawMax(uint256,address)": "ea5ead19",
    "withdrawMaxAndTransfer(uint256,address)": "c156a11d",
    "withdrawMultiple(uint256[],address,uint128[])": "a2ffb897",
    "withdrawableAmountOf(uint256)": "d975dfed"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"senderAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"recipientAmount\",\"type\":\"uint128\"}],\"name\":\"CancelLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolRevenues\",\"type\":\"uint128\"}],\"name\":\"ClaimProtocolRevenues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"deposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"brokerFee\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct Lockup.CreateAmounts\",\"name\":\"amounts\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"cancelable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"start\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cliff\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"end\",\"type\":\"uint40\"}],\"indexed\":false,\"internalType\":\"struct LockupLinear.Range\",\"name\":\"range\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"CreateLockupLinearStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RenounceLockupStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"SetComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"oldNFTDescriptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"SetNFTDescriptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"WithdrawFromLockupStream\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"UD60x18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"claimProtocolRevenues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"cancelable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"cliff\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"total\",\"type\":\"uint40\"}],\"internalType\":\"struct LockupLinear.Durations\",\"name\":\"durations\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"UD60x18\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct Broker\",\"name\":\"broker\",\"type\":\"tuple\"}],\"internalType\":\"struct LockupLinear.CreateWithDurations\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createWithDurations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"totalAmount\",\"type\":\"uint128\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"cancelable\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"start\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cliff\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"end\",\"type\":\"uint40\"}],\"internalType\":\"struct LockupLinear.Range\",\"name\":\"range\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"UD60x18\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct Broker\",\"name\":\"broker\",\"type\":\"tuple\"}],\"internalType\":\"struct LockupLinear.CreateWithRange\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createWithRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getCliffTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"cliffTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getDepositedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"depositedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"start\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cliff\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"end\",\"type\":\"uint40\"}],\"internalType\":\"struct LockupLinear.Range\",\"name\":\"range\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRefundedAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"startTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cliffTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isCancelable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"wasCanceled\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"endTime\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"isDepleted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isStream\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"deposited\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withdrawn\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"refunded\",\"type\":\"uint128\"}],\"internalType\":\"struct Lockup.Amounts\",\"name\":\"amounts\",\"type\":\"tuple\"}],\"internalType\":\"struct LockupLinear.Stream\",\"name\":\"stream\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawnAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCancelable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isCold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isDepleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"isWarm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"protocolRevenues\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"revenues\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"refundableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"refundableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2Comptroller\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"setComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISablierV2NFTDescriptor\",\"name\":\"newNFTDescriptor\",\"type\":\"address\"}],\"name\":\"setNFTDescriptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"statusOf\",\"outputs\":[{\"internalType\":\"enum Lockup.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"streamedAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"streamedAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"wasCanceled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"withdrawMaxAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"withdrawableAmountOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"withdrawableAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"CancelLockupStream(uint256,address,address,uint128,uint128)\":{\"params\":{\"recipient\":\"The address of the stream's recipient.\",\"recipientAmount\":\"The amount of assets left for the stream's recipient to withdraw, denoted in units of the asset's decimals.\",\"sender\":\"The address of the stream's sender.\",\"senderAmount\":\"The amount of assets refunded to the stream's sender, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream.\"}},\"ClaimProtocolRevenues(address,address,uint128)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"asset\":\"The contract address of the ERC-20 asset the protocol revenues have been claimed for.\",\"protocolRevenues\":\"The amount of protocol revenues claimed, denoted in units of the asset's decimals.\"}},\"CreateLockupLinearStream(uint256,address,address,address,(uint128,uint128,uint128),address,bool,(uint40,uint40,uint40),address)\":{\"params\":{\"amounts\":\"Struct containing (i) the deposit amount, (ii) the protocol fee amount, and (iii) the broker fee amount, all denoted in units of the asset's decimals.\",\"asset\":\"The contract address of the ERC-20 asset used for streaming.\",\"broker\":\"The address of the broker who has helped create the stream, e.g. a front-end website.\",\"cancelable\":\"Boolean indicating whether the stream will be cancelable or not.\",\"funder\":\"The address which funded the stream.\",\"range\":\"Struct containing (i) the stream's start time, (ii) cliff time, and (iii) end time, all as Unix timestamps.\",\"recipient\":\"The address receiving the assets.\",\"sender\":\"The address streaming the assets, with the ability to cancel the stream.\",\"streamId\":\"The id of the newly created stream.\"}},\"RenounceLockupStream(uint256)\":{\"params\":{\"streamId\":\"The id of the stream.\"}},\"SetComptroller(address,address,address)\":{\"params\":{\"admin\":\"The address of the contract admin.\",\"newComptroller\":\"The address of the new comptroller contract.\",\"oldComptroller\":\"The address of the old comptroller contract.\"}},\"SetNFTDescriptor(address,address,address)\":{\"params\":{\"admin\":\"The address of the current contract admin.\",\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\",\"oldNFTDescriptor\":\"The address of the old NFT descriptor contract.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"TransferAdmin(address,address)\":{\"params\":{\"newAdmin\":\"The address of the new admin.\",\"oldAdmin\":\"The address of the old admin.\"}},\"WithdrawFromLockupStream(uint256,address,uint128)\":{\"params\":{\"amount\":\"The amount of assets withdrawn, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream.\",\"to\":\"The address that has received the withdrawn assets.\"}}},\"kind\":\"dev\",\"methods\":{\"MAX_FEE()\":{\"details\":\"This value is hard coded as a constant.\"},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.\",\"params\":{\"streamId\":\"The id of the stream NFT to burn.\"}},\"cancel(uint256)\":{\"details\":\"Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender` is, and if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).\",\"params\":{\"streamId\":\"The id of the stream to cancel.\"}},\"cancelMultiple(uint256[])\":{\"details\":\"Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.\",\"params\":{\"streamIds\":\"The ids of the streams to cancel.\"}},\"claimProtocolRevenues(address)\":{\"details\":\"Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"asset\":\"The contract address of the ERC-20 asset for which to claim protocol revenues.\"}},\"createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))\":{\"details\":\"Emits a {Transfer} and {CreateLockupLinearStream} event. Requirements: - All requirements in {createWithRange} must be met for the calculated parameters.\",\"params\":{\"params\":\"Struct encapsulating the function parameters, which are documented in {DataTypes}.\"},\"returns\":{\"streamId\":\"The id of the newly created stream.\"}},\"createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))\":{\"details\":\"Emits a {Transfer} and {CreateLockupLinearStream} event. Notes: - As long as the times are ordered, it is not an error for the start or the cliff time to be in the past. Requirements: - Must not be delegate called. - `params.totalAmount` must be greater than zero. - If set, `params.broker.fee` must not be greater than `MAX_FEE`. - `params.range.start` must be less than or equal to `params.range.cliff`. - `params.range.cliff` must be less than `params.range.end`. - `params.range.end` must be in the future. - `params.recipient` must not be the zero address. - `msg.sender` must have allowed this contract to spend at least `params.totalAmount` assets.\",\"params\":{\"params\":\"Struct encapsulating the function parameters, which are documented in {DataTypes}.\"},\"returns\":{\"streamId\":\"The id of the newly created stream.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getAsset(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getCliffTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getDepositedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getEndTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRange(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRecipient(uint256)\":{\"details\":\"Reverts if the NFT has been burned.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getRefundedAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getSender(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getStartTime(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getStream(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"getWithdrawnAmount(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isCancelable(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isCold(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isDepleted(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isStream(uint256)\":{\"details\":\"Does not revert if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"isWarm(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"protocolRevenues(address)\":{\"params\":{\"asset\":\"The contract address of the ERC-20 asset to query.\"}},\"refundableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"renounce(uint256)\":{\"details\":\"Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.\",\"params\":{\"streamId\":\"The id of the stream to renounce.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setComptroller(address)\":{\"details\":\"Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newComptroller\":\"The address of the new comptroller contract.\"}},\"setNFTDescriptor(address)\":{\"details\":\"Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newNFTDescriptor\":\"The address of the new NFT descriptor contract.\"}},\"statusOf(uint256)\":{\"params\":{\"streamId\":\"The stream id for the query.\"}},\"streamedAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferAdmin(address)\":{\"details\":\"Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.\",\"params\":{\"newAdmin\":\"The address of the new admin.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"wasCanceled(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}},\"withdraw(uint256,address,uint128)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.\",\"params\":{\"amount\":\"The amount to withdraw, denoted in units of the asset's decimals.\",\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMax(uint256,address)\":{\"details\":\"Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.\",\"params\":{\"streamId\":\"The id of the stream to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawMaxAndTransfer(uint256,address)\":{\"details\":\"Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.\",\"params\":{\"newRecipient\":\"The address of the new owner of the stream NFT.\",\"streamId\":\"The id of the stream NFT to transfer.\"}},\"withdrawMultiple(uint256[],address,uint128[])\":{\"details\":\"Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.\",\"params\":{\"amounts\":\"The amounts to withdraw, denoted in units of the asset's decimals.\",\"streamIds\":\"The ids of the streams to withdraw from.\",\"to\":\"The address receiving the withdrawn assets.\"}},\"withdrawableAmountOf(uint256)\":{\"details\":\"Reverts if `streamId` references a null stream.\",\"params\":{\"streamId\":\"The stream id for the query.\"}}},\"title\":\"ISablierV2LockupLinear\",\"version\":1},\"userdoc\":{\"events\":{\"CancelLockupStream(uint256,address,address,uint128,uint128)\":{\"notice\":\"Emitted when a stream is canceled.\"},\"ClaimProtocolRevenues(address,address,uint128)\":{\"notice\":\"Emitted when the admin claims all protocol revenues accrued for a particular ERC-20 asset.\"},\"CreateLockupLinearStream(uint256,address,address,address,(uint128,uint128,uint128),address,bool,(uint40,uint40,uint40),address)\":{\"notice\":\"Emitted when a stream is created.\"},\"RenounceLockupStream(uint256)\":{\"notice\":\"Emitted when a sender gives up the right to cancel a stream.\"},\"SetComptroller(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new comptroller contract.\"},\"SetNFTDescriptor(address,address,address)\":{\"notice\":\"Emitted when the admin sets a new NFT descriptor contract.\"},\"TransferAdmin(address,address)\":{\"notice\":\"Emitted when the admin is transferred.\"},\"WithdrawFromLockupStream(uint256,address,uint128)\":{\"notice\":\"Emitted when assets are withdrawn from a stream.\"}},\"kind\":\"user\",\"methods\":{\"MAX_FEE()\":{\"notice\":\"Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%.\"},\"admin()\":{\"notice\":\"The address of the admin account or contract.\"},\"burn(uint256)\":{\"notice\":\"Burns the NFT associated with the stream.\"},\"cancel(uint256)\":{\"notice\":\"Cancels the stream and refunds any remaining assets to the sender.\"},\"cancelMultiple(uint256[])\":{\"notice\":\"Cancels multiple streams and refunds any remaining assets to the sender.\"},\"claimProtocolRevenues(address)\":{\"notice\":\"Claims all accumulated protocol revenues for the provided ERC-20 asset.\"},\"comptroller()\":{\"notice\":\"Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration.\"},\"createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))\":{\"notice\":\"Creates a stream by setting the start time to `block.timestamp`, and the end time to the sum of `block.timestamp` and `params.durations.total. The stream is funded by `msg.sender` and is wrapped in an ERC-721 NFT.\"},\"createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))\":{\"notice\":\"Creates a stream with the provided start time and end time as the range. The stream is funded by `msg.sender` and is wrapped in an ERC-721 NFT.\"},\"getAsset(uint256)\":{\"notice\":\"Retrieves the address of the ERC-20 asset used for streaming.\"},\"getCliffTime(uint256)\":{\"notice\":\"Retrieves the stream's cliff time, which is a Unix timestamp.\"},\"getDepositedAmount(uint256)\":{\"notice\":\"Retrieves the amount deposited in the stream, denoted in units of the asset's decimals.\"},\"getEndTime(uint256)\":{\"notice\":\"Retrieves the stream's end time, which is a Unix timestamp.\"},\"getRange(uint256)\":{\"notice\":\"Retrieves the stream's range, which is a struct containing (i) the stream's start time, (ii) cliff time, and (iii) end time, all as Unix timestamps.\"},\"getRecipient(uint256)\":{\"notice\":\"Retrieves the stream's recipient.\"},\"getRefundedAmount(uint256)\":{\"notice\":\"Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled.\"},\"getSender(uint256)\":{\"notice\":\"Retrieves the stream's sender.\"},\"getStartTime(uint256)\":{\"notice\":\"Retrieves the stream's start time, which is a Unix timestamp.\"},\"getStream(uint256)\":{\"notice\":\"Retrieves the stream entity.\"},\"getWithdrawnAmount(uint256)\":{\"notice\":\"Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals.\"},\"isCancelable(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`.\"},\"isCold(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted.\"},\"isDepleted(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is depleted.\"},\"isStream(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream exists.\"},\"isWarm(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming.\"},\"nextStreamId()\":{\"notice\":\"Counter for stream ids, used in the create functions.\"},\"protocolRevenues(address)\":{\"notice\":\"Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals.\"},\"refundableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals.\"},\"renounce(uint256)\":{\"notice\":\"Removes the right of the stream's sender to cancel the stream.\"},\"setComptroller(address)\":{\"notice\":\"Assigns a new comptroller contract responsible for the protocol configuration.\"},\"setNFTDescriptor(address)\":{\"notice\":\"Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs.\"},\"statusOf(uint256)\":{\"notice\":\"Retrieves the stream's status.\"},\"streamedAmountOf(uint256)\":{\"notice\":\"Calculates the amount streamed to the recipient, denoted in units of the asset's decimals. When the stream is warm, the streaming function is: $$ f(x) = x * d + c $$ Where: - $x$ is the elapsed time divided by the stream's total duration. - $d$ is the deposited amount. - $c$ is the cliff amount. Upon cancellation of the stream, the amount streamed is calculated as the difference between the deposited amount and the refunded amount. Ultimately, when the stream becomes depleted, the streamed amount is equivalent to the total amount withdrawn.\"},\"transferAdmin(address)\":{\"notice\":\"Transfers the contract admin to a new address.\"},\"wasCanceled(uint256)\":{\"notice\":\"Retrieves a flag indicating whether the stream was canceled.\"},\"withdraw(uint256,address,uint128)\":{\"notice\":\"Withdraws the provided amount of assets from the stream to the `to` address.\"},\"withdrawMax(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the provided address `to`.\"},\"withdrawMaxAndTransfer(uint256,address)\":{\"notice\":\"Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`.\"},\"withdrawMultiple(uint256[],address,uint128[])\":{\"notice\":\"Withdraws assets from streams to the provided address `to`.\"},\"withdrawableAmountOf(uint256)\":{\"notice\":\"Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals.\"}},\"notice\":\"Creates and manages lockup streams with a linear streaming function.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol\":\"ISablierV2LockupLinear\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/v2-core/lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/v2-core/lib/prb-math/\",\":@prb/test/=lib/v2-core/lib/prb-test/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-deploy-proxy/=lib/forge-deploy/examples/basic/lib/forge-deploy-proxy/src/\",\":forge-deploy/=lib/forge-deploy/contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":prb-math/=lib/v2-core/lib/prb-math/src/\",\":prb-test/=lib/v2-core/lib/prb-test/src/\",\":solady/=lib/v2-core/lib/solady/\",\":solarray/=lib/v2-core/lib/solarray/src/\",\":uniswap-v2-core/=lib/uniswap-v2-core/contracts/\",\":uniswap-v2-periphery/=lib/uniswap-v2-periphery/contracts/\",\":v2-core/=lib/v2-core/\"]},\"sources\":{\"lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d\",\"dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1\"]},\"lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x8d4cb0754ee7faf208c69cff231bb75ca4676db78c32e6fd4a06b71b739b3571\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d66d89d40895a0f68bb82ef5ba6605924e9a37ba4e79e21df2e63afc30916aa7\",\"dweb:/ipfs/QmWAsZysULG6BMRwQjjCeqV1TimAAWGiFC2aAGt3eb6gh6\"]},\"lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x23018238ee951d13a9d7f7d2cd641065752923c0aeede09a58a7f1fabf891d75\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83a5286e82596aa938b6e38803360ca935b9727dc98f317b318a559ae9f438a5\",\"dweb:/ipfs/QmaBhNbpWZ6JPrfhuqX54DAtZj35yX278vArsNr5WtdXoZ\"]},\"lib/v2-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x540685d7ece3faa56f38253270ff11b18e63949fb8659c408123b1874674492e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5474839e19e2571c52eae3aab1dc6e6edf2b20bbba9895f59db6594a2678a3d5\",\"dweb:/ipfs/QmVHocBeANMkq4TzVM7q9At5NSg1TEpT9D9vgJ5dGcvcPN\"]},\"lib/v2-core/lib/prb-math/src/Common.sol\":{\"keccak256\":\"0x8c348a8711a5036ca64904ff546fb0c27a11143e3a1c1217ea22e1cebd08b126\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db9000ccca882c9a4d78cb18b80e10ab6c19a9765cd57638c462b7e526c54a80\",\"dweb:/ipfs/QmYkM5pmgMrjau6YMNrNvrwSBEytc9jT8jGb2YdxhB4woe\"]},\"lib/v2-core/lib/prb-math/src/UD2x18.sol\":{\"keccak256\":\"0x179b0a5b8df55b8bd0604c4d325e4756891e1cd88a4d92adf1b8630bb4610d6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://abcad423258a6122417ba15d59af5bca32bb629df203b664b450d5e0523c8d95\",\"dweb:/ipfs/QmZXFJ9sShEeMz9X4XmmdtrW6zBVB7qUcft4Tfx5sSUHAG\"]},\"lib/v2-core/lib/prb-math/src/UD60x18.sol\":{\"keccak256\":\"0xdd6ee8bbbb9f4c288aa1455685e0dfd81c54aaec976f05ddf003d2b8f0c89639\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c574478b6f297ae9236ca342d755f6bb5163a4a2dac7f5f6a09ffb34a55069de\",\"dweb:/ipfs/QmQNfbjhqSwKLusdkhAukxnAMfavWqbBxpQ2MtiZR6LkSk\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/Casting.sol\":{\"keccak256\":\"0xeb29a206d3c96b2c9b897e4bcec586e2ad6f91825f9e14601d9ee01c24e493ed\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7279879074ecb41f116f07bb437849f3597a65e44e7facb0d8936e333674537f\",\"dweb:/ipfs/QmTpC8zBrFN7PjPoYBH2RGYWaA6hxaAS9kS9Bwzm7zBogV\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/Constants.sol\":{\"keccak256\":\"0x309c5b7cda602e140f3f8332d2e449b8abec0fa7bf81b67b9c98e1cf28aa8e8b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://209d57cfff646b020ed1af00df92f0b5e0a73fdac56fcc7d0ceb5e4365fefaf2\",\"dweb:/ipfs/QmdDtHpQK2sBAugSmuf1iBdZRg35Ygv3vradVhdbhikGUM\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/Errors.sol\":{\"keccak256\":\"0x72058e9cd109aa432cd8beccbdca9398389599151dc5dbc2d84eeafa289c792c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a85b24b61de3288fdc2ed0bb3acccec390b02b68d15b32c9c8c11aa368f700f\",\"dweb:/ipfs/Qme7iL75jWiTKKRSZt6p3FMtyY2mnoxcdJygS4ycf2m5Qq\"]},\"lib/v2-core/lib/prb-math/src/sd1x18/ValueType.sol\":{\"keccak256\":\"0xdcde09130ea4ce86fadd88bbdb3e740c69dc86ce5239957694a8343e6ff9644a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbf356aa75e0525e9cf22cccc3151d955a9e78f91eb2c88f2744b09f9ef80079\",\"dweb:/ipfs/QmUMaVrFuidro7TvgGNBdHpFHzSA2DRVsMVAygEdQyL1Ct\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Casting.sol\":{\"keccak256\":\"0x3a632d2ae4779370b02d4f43a4ec6e3808528c2e09055e803ed87df983cad35e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://832ec36c135ff7ddb0bd93ca462aea4eb4521f1daddf4107a690e0c7b94214ec\",\"dweb:/ipfs/Qmcj9uXDMVX97wGbu44NDGLdcTCuuVRhPF4vhr3UjjeLrd\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Constants.sol\":{\"keccak256\":\"0x312e75443376ff6bc05125c16ea1a722a80ed6a6a2a7b020678c38213a70162a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a438ac6c4856d78541746484c1a5e1398ff6b505862058c89e90febdffc28f72\",\"dweb:/ipfs/QmYhRQ33bdLWSqbySqKQtu9fzKpQrEXEKzuS1TFwyMtbDg\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Errors.sol\":{\"keccak256\":\"0x71a19d407221fcea92fcac522d36010ba42c3ce2ed7d4a1eec283bd5ac0cf9e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://996ad3941b48e86433352d2ad8b19eafd3ff2454983bd8ffea28d37d6c4447cc\",\"dweb:/ipfs/QmV2VSpQimdngfY5fx8SVARDecJdN19TPjbFckUAAoGcKM\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Helpers.sol\":{\"keccak256\":\"0xc8b24ba940189a13418aae6c1483a7b9acde1d35a99ee0134f6d58ec05c524c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d71dc8cbded4150cc3db9612123892e4ee79e6a37d106c40f406054ba4035792\",\"dweb:/ipfs/QmeyY1XasbY2iE997mjDyzUKYCfdsppnRQV3FvvYF5uhiw\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/Math.sol\":{\"keccak256\":\"0x561694ead1deae45027c5851c24eab53dc9f8a7eb8c623fdf5eebe56dd9da20a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1dc6789db7d57ce54bc82c5aa74623dc12c3e0cafbaf921940788d0f502a66c5\",\"dweb:/ipfs/QmeiDrGFSCGNk99ggThYVE4pEaEAgb4LmxgZZKq4GWS2Sv\"]},\"lib/v2-core/lib/prb-math/src/sd59x18/ValueType.sol\":{\"keccak256\":\"0xaf4cc89130b6ce22ae7e1d1bd8d912019278d7d9b35e37bb211aa78cc1b7ff32\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c535c057358dda38d58c596272ad505811563bcfad51545ae82f0e9d0e39cb9\",\"dweb:/ipfs/QmVDTjMFxzZqtmLEQm55KaPy6hytAqG7Ve2tYzvYCvswcv\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/Casting.sol\":{\"keccak256\":\"0x395a47779cf0a9358b9998a5ebfc48a0dc07062e4f6a5d3ac536f7870e43691e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f626199e5bc02936ac2520ff4d2f26ff318536e83e47b9880f558b85114282d3\",\"dweb:/ipfs/QmaqVnsvezFpoYoYDhFoskKFvUL37DW6Hwry5ktvkX5KvJ\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/Constants.sol\":{\"keccak256\":\"0xe7cad7b8cb3daa6d124e5b4b9aff8148bb4b573f5ead0b8ffe16f8548c1a8587\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b8c477fb4a12612276c5746052897fce01cf6ad0f31cc8e6b19b7e125ef41bb5\",\"dweb:/ipfs/QmWENWZ15cTVByU2ixuHbNdk5EjCaawkstTbn7vNnRzZtU\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/Errors.sol\":{\"keccak256\":\"0x28e16c14bae589f4d257726a7b6d89ec03112712beaf0f91b33c0a188519fe87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e80ca782d9ea4e5f1ba02981ec5bba4df740912b192e1a2b119e6fa920c45aea\",\"dweb:/ipfs/QmYhdVYTh67Mbh77aQMHt1UTbJKuuhHeT4nhCbKCAM3HEr\"]},\"lib/v2-core/lib/prb-math/src/ud2x18/ValueType.sol\":{\"keccak256\":\"0xc8590c817624727ad369239cdf304b71015041714d6bf2f88569797742be628c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e9d4071f4c97d4582e6cc0290254e798593185bc0b0c4d399758677e5253921\",\"dweb:/ipfs/QmUjpqj1Y9wnmgVhtPQXTJ7eW1wwhfaWJbHRCrxZ2niQ3T\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Casting.sol\":{\"keccak256\":\"0xbdce3b69f27fb198ea084b5df90a83075a61e9fee7021da2e556fa7c8a7574cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b09c907651b797384f53009e70a11fd6c7a795a85158e872598f13c337500b2\",\"dweb:/ipfs/QmUKCfKrcsbsR1QqhDpsC7NanQhPyuoVa3KS78Lqy83Lfi\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Constants.sol\":{\"keccak256\":\"0x3d2219fe39162d051d993702598c15a2735784fff0c0d2dadea1b02a51cb20f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://176f0175397a2965f2b1380c9f97cdcffdafaa7f2d3585c5db26d61b4902299e\",\"dweb:/ipfs/QmbuGa84ah972Qa2JBFHbE4aLoN6cx1J8hDLztzStGrRMf\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Conversions.sol\":{\"keccak256\":\"0xa949472633cc36fa8d2714e167ff71b51198358bf3f6117d038350e14f30cec8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3f2d3b3631b3b43cd43f3ef41c2912582eb7bd56c83dfab417adf1a7afa81fd4\",\"dweb:/ipfs/QmfDFXkXLYp1skMZ6CBnYkL3aJKdVPfC9SnfcSSwbkJ2Wm\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Errors.sol\":{\"keccak256\":\"0x3a25f4e18a8a69fa9ac84f826bbfa4b6535788ae9a26623cc848e169e5d842ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b34b02e146128930fa73b3a2de2f22c27dbf180012096d2602256263fdda18a\",\"dweb:/ipfs/QmQ46FQ2arioGSwAePLiLDGv6CBtkrqdJAifV7MFPqfPPu\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Helpers.sol\":{\"keccak256\":\"0x24c9c09d2dd73770c516a4f08296aa9e83b6431b52d97990a726c41c8aa2746f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5ec749ccb50bd3420346951875c2a0bb6469e90190c82630de6b2117a8fad29\",\"dweb:/ipfs/QmT4dgxVtbwMbSLyFRXeyYzfda7AvMyRUVZzd6yUS8qr7C\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/Math.sol\":{\"keccak256\":\"0xb9c4ab4753274baf1cc88b90da04b1308445c074eb94d7ab229109d78602497b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e80843aeb21429a0c12dfd22f2f1d69478de32b8cb17b312e86fa2b0cfe50f7e\",\"dweb:/ipfs/QmdY293FrZb9KeaHTfq7wMXpQWinqFHhiLaSyQLKNcWs8w\"]},\"lib/v2-core/lib/prb-math/src/ud60x18/ValueType.sol\":{\"keccak256\":\"0x3a2ada6e87a1c61d3a58e7ff9d5ea9eee00a4cca8b350a9d461e3bb2867693f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://021a34174b566e8575ce7f9d8f93f3e96c8fa748192bc5f9b4bdc049ce6675cc\",\"dweb:/ipfs/QmXa6CXbEnf7K64phvDePsjznomBWZMkCg5nGn81KuwFf2\"]},\"lib/v2-core/src/interfaces/IAdminable.sol\":{\"keccak256\":\"0x289bd3a74cb971dd3928c44d194d9b75939d75494901df32512b5ccbc0ed8cb0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://634a0098bc40a927bbefe46f6f2d8a5d94f9f92c5bad0149e4c7da67b0731bc7\",\"dweb:/ipfs/QmVsMVaKZ51uG7wyTrcoSMHsMYmVvuCuPnVgNHJfFRKeSQ\"]},\"lib/v2-core/src/interfaces/ISablierV2Base.sol\":{\"keccak256\":\"0x7fa3b890885b19de99e290ccd1d90da3d021be70bd4792c582b7f9e451749792\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://5efc3274c9ac532baf96805f127e8b46b7292b12149eca7d830263bbe6ffde95\",\"dweb:/ipfs/QmNZaKcPahmA8juiY42FShVvRn4pktyubP13oyr5p6uCJk\"]},\"lib/v2-core/src/interfaces/ISablierV2Comptroller.sol\":{\"keccak256\":\"0x2133c91a65c1cdfa24b0c5b35317848d167436d49ecef4e22b72934f8ed9f2fa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f6935d55b1763eeca5e4392542586b2168f100036bcffddd6800cf28aa18052c\",\"dweb:/ipfs/QmRzRxdbcppc1tMv1gQ9NzT5iftEFP8QS57G1RbyAKbyoT\"]},\"lib/v2-core/src/interfaces/ISablierV2Lockup.sol\":{\"keccak256\":\"0xa971017f4caff1aff29e1cfc6edac609d771b967aafb8543104bccdd0a5a77d0\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://cc9319188115a84f87891a8745bf42511fee66c213d97d99d08e35aaa4720d93\",\"dweb:/ipfs/QmeFjJZoKA2wGzVoBdwx8f6baciuKZUBQRYiyo2Moidhic\"]},\"lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol\":{\"keccak256\":\"0x03c6a5965351524efcfa9a09dd6591d8ce46360f2660c27b98e4c702fd48dba2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9a8fceedde8f2474736e67ea993f6d56a58c43ceab7d45b612c355d34be1317b\",\"dweb:/ipfs/QmQWLyqXpWjARgwgPPFGYSC4H8nMPmPACrs4X7BdjMzCJV\"]},\"lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol\":{\"keccak256\":\"0xe7840e59d0ce011e0be119098e82a3b4deb6ca779c816855ebed6a29349fc970\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://733f9f5f21b72b76a121677b5f2dcd113e301408d969b5364d082c7c9dc8fec7\",\"dweb:/ipfs/QmdtUp1Ss4dHBnosNkjT9tCuxJ26UTP5dBxrVEJRZhe76E\"]},\"lib/v2-core/src/types/DataTypes.sol\":{\"keccak256\":\"0x83883c59bf969d1f64d3eaa073c35e3ab4e1cdf5502a3973ba710eb282cbb2b4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://4616d1730d519454bba426748a9fbf71dd5488c38b6a7584e49f7a669150bfcc\",\"dweb:/ipfs/QmXqLNBS9J3hnuR9bzh8cc4Q63KdLs8M9Ze9F3P2k8rBhL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "senderAmount",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "recipientAmount",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CancelLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "protocolRevenues",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ClaimProtocolRevenues",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "funder",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "struct Lockup.CreateAmounts",
              "name": "amounts",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint128",
                  "name": "deposit",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "protocolFee",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "brokerFee",
                  "type": "uint128"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "cancelable",
              "type": "bool",
              "indexed": false
            },
            {
              "internalType": "struct LockupLinear.Range",
              "name": "range",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint40",
                  "name": "start",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "cliff",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "end",
                  "type": "uint40"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "broker",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CreateLockupLinearStream",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RenounceLockupStream",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "oldComptroller",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "newComptroller",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetComptroller",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "oldNFTDescriptor",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "newNFTDescriptor",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SetNFTDescriptor",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "oldAdmin",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newAdmin",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TransferAdmin",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "WithdrawFromLockupStream",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MAX_FEE",
          "outputs": [
            {
              "internalType": "UD60x18",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "admin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancel"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "streamIds",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelMultiple"
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claimProtocolRevenues"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "comptroller",
          "outputs": [
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct LockupLinear.CreateWithDurations",
              "name": "params",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint128",
                  "name": "totalAmount",
                  "type": "uint128"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "cancelable",
                  "type": "bool"
                },
                {
                  "internalType": "struct LockupLinear.Durations",
                  "name": "durations",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint40",
                      "name": "cliff",
                      "type": "uint40"
                    },
                    {
                      "internalType": "uint40",
                      "name": "total",
                      "type": "uint40"
                    }
                  ]
                },
                {
                  "internalType": "struct Broker",
                  "name": "broker",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "UD60x18",
                      "name": "fee",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createWithDurations",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct LockupLinear.CreateWithRange",
              "name": "params",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint128",
                  "name": "totalAmount",
                  "type": "uint128"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "cancelable",
                  "type": "bool"
                },
                {
                  "internalType": "struct LockupLinear.Range",
                  "name": "range",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint40",
                      "name": "start",
                      "type": "uint40"
                    },
                    {
                      "internalType": "uint40",
                      "name": "cliff",
                      "type": "uint40"
                    },
                    {
                      "internalType": "uint40",
                      "name": "end",
                      "type": "uint40"
                    }
                  ]
                },
                {
                  "internalType": "struct Broker",
                  "name": "broker",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "UD60x18",
                      "name": "fee",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createWithRange",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAsset",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getCliffTime",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "cliffTime",
              "type": "uint40"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDepositedAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "depositedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getEndTime",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "endTime",
              "type": "uint40"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRange",
          "outputs": [
            {
              "internalType": "struct LockupLinear.Range",
              "name": "range",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint40",
                  "name": "start",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "cliff",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "end",
                  "type": "uint40"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRefundedAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "refundedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSender",
          "outputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStartTime",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "startTime",
              "type": "uint40"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStream",
          "outputs": [
            {
              "internalType": "struct LockupLinear.Stream",
              "name": "stream",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "uint40",
                  "name": "startTime",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "cliffTime",
                  "type": "uint40"
                },
                {
                  "internalType": "bool",
                  "name": "isCancelable",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "wasCanceled",
                  "type": "bool"
                },
                {
                  "internalType": "contract IERC20",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "uint40",
                  "name": "endTime",
                  "type": "uint40"
                },
                {
                  "internalType": "bool",
                  "name": "isDepleted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isStream",
                  "type": "bool"
                },
                {
                  "internalType": "struct Lockup.Amounts",
                  "name": "amounts",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint128",
                      "name": "deposited",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint128",
                      "name": "withdrawn",
                      "type": "uint128"
                    },
                    {
                      "internalType": "uint128",
                      "name": "refunded",
                      "type": "uint128"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getWithdrawnAmount",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "withdrawnAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isCancelable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isCold",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isDepleted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isStream",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isWarm",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextStreamId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "asset",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "protocolRevenues",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "revenues",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "refundableAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "refundableAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounce"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISablierV2Comptroller",
              "name": "newComptroller",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setComptroller"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISablierV2NFTDescriptor",
              "name": "newNFTDescriptor",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setNFTDescriptor"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "statusOf",
          "outputs": [
            {
              "internalType": "enum Lockup.Status",
              "name": "status",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "streamedAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "streamedAmount",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newAdmin",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferAdmin"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "wasCanceled",
          "outputs": [
            {
              "internalType": "bool",
              "name": "result",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMax"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMaxAndTransfer"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "streamIds",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint128[]",
              "name": "amounts",
              "type": "uint128[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMultiple"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streamId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "withdrawableAmountOf",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "withdrawableAmount",
              "type": "uint128"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "MAX_FEE()": {
            "details": "This value is hard coded as a constant."
          },
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the number of tokens in ``owner``'s account."
          },
          "burn(uint256)": {
            "details": "Emits a {Transfer} event. Requirements: - Must not be delegate called. - `streamId` must reference a depleted stream. - The NFT must exist. - `msg.sender` must be either the NFT owner or an approved third party.",
            "params": {
              "streamId": "The id of the stream NFT to burn."
            }
          },
          "cancel(uint256)": {
            "details": "Emits a {Transfer}, {CancelLockupStream}, and {MetadataUpdate} event. Notes: - If there any assets left for the recipient to withdraw, the stream is marked as canceled. Otherwise, the stream is marked as depleted. - This function attempts to invoke a hook on either the sender or the recipient, depending on who `msg.sender` is, and if the resolved address is a contract. Requirements: - Must not be delegate called. - The stream must be warm and cancelable. - `msg.sender` must be either the stream's sender or the stream's recipient (i.e. the NFT owner).",
            "params": {
              "streamId": "The id of the stream to cancel."
            }
          },
          "cancelMultiple(uint256[])": {
            "details": "Emits multiple {Transfer}, {CancelLockupStream}, and {MetadataUpdate} events. Notes: - Refer to the notes in {cancel}. Requirements: - All requirements from {cancel} must be met for each stream.",
            "params": {
              "streamIds": "The ids of the streams to cancel."
            }
          },
          "claimProtocolRevenues(address)": {
            "details": "Emits a {ClaimProtocolRevenues} event. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "asset": "The contract address of the ERC-20 asset for which to claim protocol revenues."
            }
          },
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))": {
            "details": "Emits a {Transfer} and {CreateLockupLinearStream} event. Requirements: - All requirements in {createWithRange} must be met for the calculated parameters.",
            "params": {
              "params": "Struct encapsulating the function parameters, which are documented in {DataTypes}."
            },
            "returns": {
              "streamId": "The id of the newly created stream."
            }
          },
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))": {
            "details": "Emits a {Transfer} and {CreateLockupLinearStream} event. Notes: - As long as the times are ordered, it is not an error for the start or the cliff time to be in the past. Requirements: - Must not be delegate called. - `params.totalAmount` must be greater than zero. - If set, `params.broker.fee` must not be greater than `MAX_FEE`. - `params.range.start` must be less than or equal to `params.range.cliff`. - `params.range.cliff` must be less than `params.range.end`. - `params.range.end` must be in the future. - `params.recipient` must not be the zero address. - `msg.sender` must have allowed this contract to spend at least `params.totalAmount` assets.",
            "params": {
              "params": "Struct encapsulating the function parameters, which are documented in {DataTypes}."
            },
            "returns": {
              "streamId": "The id of the newly created stream."
            }
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "getAsset(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getCliffTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getDepositedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getEndTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getRange(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getRecipient(uint256)": {
            "details": "Reverts if the NFT has been burned.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getRefundedAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getSender(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getStartTime(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getStream(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "getWithdrawnAmount(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "isCancelable(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isCold(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isDepleted(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isStream(uint256)": {
            "details": "Does not revert if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "isWarm(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "name()": {
            "details": "Returns the token collection name."
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "protocolRevenues(address)": {
            "params": {
              "asset": "The contract address of the ERC-20 asset to query."
            }
          },
          "refundableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "renounce(uint256)": {
            "details": "Emits a {RenounceLockupStream} and {MetadataUpdate} event. Notes: - This is an irreversible operation. - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract. Requirements: - Must not be delegate called. - `streamId` must reference a warm stream. - `msg.sender` must be the stream's sender. - The stream must be cancelable.",
            "params": {
              "streamId": "The id of the stream to renounce."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "setComptroller(address)": {
            "details": "Emits a {SetComptroller} event. Notes: - Does not revert if the comptroller is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newComptroller": "The address of the new comptroller contract."
            }
          },
          "setNFTDescriptor(address)": {
            "details": "Emits a {SetNFTDescriptor} and {BatchMetadataUpdate} event. Notes: - Does not revert if the NFT descriptor is the same. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newNFTDescriptor": "The address of the new NFT descriptor contract."
            }
          },
          "statusOf(uint256)": {
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "streamedAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "symbol()": {
            "details": "Returns the token collection symbol."
          },
          "tokenURI(uint256)": {
            "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
          },
          "transferAdmin(address)": {
            "details": "Notes: - Does not revert if the admin is the same. - This function can potentially leave the contract without an admin, thereby removing any functionality that is only available to the admin. Requirements: - `msg.sender` must be the contract admin.",
            "params": {
              "newAdmin": "The address of the new admin."
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          },
          "wasCanceled(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          },
          "withdraw(uint256,address,uint128)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - This function attempts to invoke a hook on the stream's recipient, provided that the recipient is a contract and `msg.sender` is either the sender or an approved operator. Requirements: - Must not be delegate called. - `streamId` must not reference a null or depleted stream. - `msg.sender` must be the stream's sender, the stream's recipient or an approved third party. - `to` must be the recipient if `msg.sender` is the stream's sender. - `to` must not be the zero address. - `amount` must be greater than zero and must not exceed the withdrawable amount.",
            "params": {
              "amount": "The amount to withdraw, denoted in units of the asset's decimals.",
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMax(uint256,address)": {
            "details": "Emits a {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} event. Notes: - Refer to the notes in {withdraw}. Requirements: - Refer to the requirements in {withdraw}.",
            "params": {
              "streamId": "The id of the stream to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "details": "Emits a {WithdrawFromLockupStream} and a {Transfer} event. Notes: - If the withdrawable amount is zero, the withdrawal is skipped. - Refer to the notes in {withdraw}. Requirements: - `msg.sender` must be the stream's recipient. - Refer to the requirements in {withdraw}. - Refer to the requirements in {IERC721.transferFrom}.",
            "params": {
              "newRecipient": "The address of the new owner of the stream NFT.",
              "streamId": "The id of the stream NFT to transfer."
            }
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "details": "Emits multiple {Transfer}, {WithdrawFromLockupStream}, and {MetadataUpdate} events. Notes: - This function attempts to call a hook on the recipient of each stream, unless `msg.sender` is the recipient. Requirements: - All requirements from {withdraw} must be met for each stream. - There must be an equal number of `streamIds` and `amounts`.",
            "params": {
              "amounts": "The amounts to withdraw, denoted in units of the asset's decimals.",
              "streamIds": "The ids of the streams to withdraw from.",
              "to": "The address receiving the withdrawn assets."
            }
          },
          "withdrawableAmountOf(uint256)": {
            "details": "Reverts if `streamId` references a null stream.",
            "params": {
              "streamId": "The stream id for the query."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MAX_FEE()": {
            "notice": "Retrieves the maximum fee that can be charged by the protocol or a broker, denoted as a fixed-point number where 1e18 is 100%."
          },
          "admin()": {
            "notice": "The address of the admin account or contract."
          },
          "burn(uint256)": {
            "notice": "Burns the NFT associated with the stream."
          },
          "cancel(uint256)": {
            "notice": "Cancels the stream and refunds any remaining assets to the sender."
          },
          "cancelMultiple(uint256[])": {
            "notice": "Cancels multiple streams and refunds any remaining assets to the sender."
          },
          "claimProtocolRevenues(address)": {
            "notice": "Claims all accumulated protocol revenues for the provided ERC-20 asset."
          },
          "comptroller()": {
            "notice": "Retrieves the address of the comptroller contract, responsible for the Sablier V2 protocol configuration."
          },
          "createWithDurations((address,address,uint128,address,bool,(uint40,uint40),(address,uint256)))": {
            "notice": "Creates a stream by setting the start time to `block.timestamp`, and the end time to the sum of `block.timestamp` and `params.durations.total. The stream is funded by `msg.sender` and is wrapped in an ERC-721 NFT."
          },
          "createWithRange((address,address,uint128,address,bool,(uint40,uint40,uint40),(address,uint256)))": {
            "notice": "Creates a stream with the provided start time and end time as the range. The stream is funded by `msg.sender` and is wrapped in an ERC-721 NFT."
          },
          "getAsset(uint256)": {
            "notice": "Retrieves the address of the ERC-20 asset used for streaming."
          },
          "getCliffTime(uint256)": {
            "notice": "Retrieves the stream's cliff time, which is a Unix timestamp."
          },
          "getDepositedAmount(uint256)": {
            "notice": "Retrieves the amount deposited in the stream, denoted in units of the asset's decimals."
          },
          "getEndTime(uint256)": {
            "notice": "Retrieves the stream's end time, which is a Unix timestamp."
          },
          "getRange(uint256)": {
            "notice": "Retrieves the stream's range, which is a struct containing (i) the stream's start time, (ii) cliff time, and (iii) end time, all as Unix timestamps."
          },
          "getRecipient(uint256)": {
            "notice": "Retrieves the stream's recipient."
          },
          "getRefundedAmount(uint256)": {
            "notice": "Retrieves the amount refunded to the sender after a cancellation, denoted in units of the asset's decimals. This amount is always zero unless the stream was canceled."
          },
          "getSender(uint256)": {
            "notice": "Retrieves the stream's sender."
          },
          "getStartTime(uint256)": {
            "notice": "Retrieves the stream's start time, which is a Unix timestamp."
          },
          "getStream(uint256)": {
            "notice": "Retrieves the stream entity."
          },
          "getWithdrawnAmount(uint256)": {
            "notice": "Retrieves the amount withdrawn from the stream, denoted in units of the asset's decimals."
          },
          "isCancelable(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream can be canceled. When the stream is cold, this flag is always `false`."
          },
          "isCold(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is cold, i.e. settled, canceled, or depleted."
          },
          "isDepleted(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is depleted."
          },
          "isStream(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream exists."
          },
          "isWarm(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream is warm, i.e. either pending or streaming."
          },
          "nextStreamId()": {
            "notice": "Counter for stream ids, used in the create functions."
          },
          "protocolRevenues(address)": {
            "notice": "Retrieves the protocol revenues accrued for the provided ERC-20 asset, in units of the asset's decimals."
          },
          "refundableAmountOf(uint256)": {
            "notice": "Calculates the amount that the sender would be refunded if the stream were canceled, denoted in units of the asset's decimals."
          },
          "renounce(uint256)": {
            "notice": "Removes the right of the stream's sender to cancel the stream."
          },
          "setComptroller(address)": {
            "notice": "Assigns a new comptroller contract responsible for the protocol configuration."
          },
          "setNFTDescriptor(address)": {
            "notice": "Sets a new NFT descriptor contract, which produces the URI describing the Sablier stream NFTs."
          },
          "statusOf(uint256)": {
            "notice": "Retrieves the stream's status."
          },
          "streamedAmountOf(uint256)": {
            "notice": "Calculates the amount streamed to the recipient, denoted in units of the asset's decimals. When the stream is warm, the streaming function is: $$ f(x) = x * d + c $$ Where: - $x$ is the elapsed time divided by the stream's total duration. - $d$ is the deposited amount. - $c$ is the cliff amount. Upon cancellation of the stream, the amount streamed is calculated as the difference between the deposited amount and the refunded amount. Ultimately, when the stream becomes depleted, the streamed amount is equivalent to the total amount withdrawn."
          },
          "transferAdmin(address)": {
            "notice": "Transfers the contract admin to a new address."
          },
          "wasCanceled(uint256)": {
            "notice": "Retrieves a flag indicating whether the stream was canceled."
          },
          "withdraw(uint256,address,uint128)": {
            "notice": "Withdraws the provided amount of assets from the stream to the `to` address."
          },
          "withdrawMax(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the provided address `to`."
          },
          "withdrawMaxAndTransfer(uint256,address)": {
            "notice": "Withdraws the maximum withdrawable amount from the stream to the current recipient, and transfers the NFT to `newRecipient`."
          },
          "withdrawMultiple(uint256[],address,uint128[])": {
            "notice": "Withdraws assets from streams to the provided address `to`."
          },
          "withdrawableAmountOf(uint256)": {
            "notice": "Calculates the amount that the recipient can withdraw from the stream, denoted in units of the asset's decimals."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/v2-core/lib/openzeppelin-contracts/contracts/",
        "@prb/math/=lib/v2-core/lib/prb-math/",
        "@prb/test/=lib/v2-core/lib/prb-test/src/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-deploy-proxy/=lib/forge-deploy/examples/basic/lib/forge-deploy-proxy/src/",
        "forge-deploy/=lib/forge-deploy/contracts/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "prb-math/=lib/v2-core/lib/prb-math/src/",
        "prb-test/=lib/v2-core/lib/prb-test/src/",
        "solady/=lib/v2-core/lib/solady/",
        "solarray/=lib/v2-core/lib/solarray/src/",
        "uniswap-v2-core/=lib/uniswap-v2-core/contracts/",
        "uniswap-v2-periphery/=lib/uniswap-v2-periphery/contracts/",
        "v2-core/=lib/v2-core/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol": "ISablierV2LockupLinear"
      },
      "libraries": {}
    },
    "sources": {
      "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xa426add89e9b4785ddeeb07b4d9352b57de8b4cb314c8cb8f0d5898938bd8de9",
        "urls": [
          "bzz-raw://09852a830ad29d33cfdf74e7035853c68e43e1a8c242b25db9d656a074a54e6d",
          "dweb:/ipfs/QmeRSfQwWr3vyP2uJxnjybtPYLMiD17E51d4eMhXQh93R1"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x8d4cb0754ee7faf208c69cff231bb75ca4676db78c32e6fd4a06b71b739b3571",
        "urls": [
          "bzz-raw://d66d89d40895a0f68bb82ef5ba6605924e9a37ba4e79e21df2e63afc30916aa7",
          "dweb:/ipfs/QmWAsZysULG6BMRwQjjCeqV1TimAAWGiFC2aAGt3eb6gh6"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x23018238ee951d13a9d7f7d2cd641065752923c0aeede09a58a7f1fabf891d75",
        "urls": [
          "bzz-raw://83a5286e82596aa938b6e38803360ca935b9727dc98f317b318a559ae9f438a5",
          "dweb:/ipfs/QmaBhNbpWZ6JPrfhuqX54DAtZj35yX278vArsNr5WtdXoZ"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x540685d7ece3faa56f38253270ff11b18e63949fb8659c408123b1874674492e",
        "urls": [
          "bzz-raw://5474839e19e2571c52eae3aab1dc6e6edf2b20bbba9895f59db6594a2678a3d5",
          "dweb:/ipfs/QmVHocBeANMkq4TzVM7q9At5NSg1TEpT9D9vgJ5dGcvcPN"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/Common.sol": {
        "keccak256": "0x8c348a8711a5036ca64904ff546fb0c27a11143e3a1c1217ea22e1cebd08b126",
        "urls": [
          "bzz-raw://db9000ccca882c9a4d78cb18b80e10ab6c19a9765cd57638c462b7e526c54a80",
          "dweb:/ipfs/QmYkM5pmgMrjau6YMNrNvrwSBEytc9jT8jGb2YdxhB4woe"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/UD2x18.sol": {
        "keccak256": "0x179b0a5b8df55b8bd0604c4d325e4756891e1cd88a4d92adf1b8630bb4610d6b",
        "urls": [
          "bzz-raw://abcad423258a6122417ba15d59af5bca32bb629df203b664b450d5e0523c8d95",
          "dweb:/ipfs/QmZXFJ9sShEeMz9X4XmmdtrW6zBVB7qUcft4Tfx5sSUHAG"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/UD60x18.sol": {
        "keccak256": "0xdd6ee8bbbb9f4c288aa1455685e0dfd81c54aaec976f05ddf003d2b8f0c89639",
        "urls": [
          "bzz-raw://c574478b6f297ae9236ca342d755f6bb5163a4a2dac7f5f6a09ffb34a55069de",
          "dweb:/ipfs/QmQNfbjhqSwKLusdkhAukxnAMfavWqbBxpQ2MtiZR6LkSk"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/Casting.sol": {
        "keccak256": "0xeb29a206d3c96b2c9b897e4bcec586e2ad6f91825f9e14601d9ee01c24e493ed",
        "urls": [
          "bzz-raw://7279879074ecb41f116f07bb437849f3597a65e44e7facb0d8936e333674537f",
          "dweb:/ipfs/QmTpC8zBrFN7PjPoYBH2RGYWaA6hxaAS9kS9Bwzm7zBogV"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/Constants.sol": {
        "keccak256": "0x309c5b7cda602e140f3f8332d2e449b8abec0fa7bf81b67b9c98e1cf28aa8e8b",
        "urls": [
          "bzz-raw://209d57cfff646b020ed1af00df92f0b5e0a73fdac56fcc7d0ceb5e4365fefaf2",
          "dweb:/ipfs/QmdDtHpQK2sBAugSmuf1iBdZRg35Ygv3vradVhdbhikGUM"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/Errors.sol": {
        "keccak256": "0x72058e9cd109aa432cd8beccbdca9398389599151dc5dbc2d84eeafa289c792c",
        "urls": [
          "bzz-raw://2a85b24b61de3288fdc2ed0bb3acccec390b02b68d15b32c9c8c11aa368f700f",
          "dweb:/ipfs/Qme7iL75jWiTKKRSZt6p3FMtyY2mnoxcdJygS4ycf2m5Qq"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd1x18/ValueType.sol": {
        "keccak256": "0xdcde09130ea4ce86fadd88bbdb3e740c69dc86ce5239957694a8343e6ff9644a",
        "urls": [
          "bzz-raw://bbf356aa75e0525e9cf22cccc3151d955a9e78f91eb2c88f2744b09f9ef80079",
          "dweb:/ipfs/QmUMaVrFuidro7TvgGNBdHpFHzSA2DRVsMVAygEdQyL1Ct"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Casting.sol": {
        "keccak256": "0x3a632d2ae4779370b02d4f43a4ec6e3808528c2e09055e803ed87df983cad35e",
        "urls": [
          "bzz-raw://832ec36c135ff7ddb0bd93ca462aea4eb4521f1daddf4107a690e0c7b94214ec",
          "dweb:/ipfs/Qmcj9uXDMVX97wGbu44NDGLdcTCuuVRhPF4vhr3UjjeLrd"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Constants.sol": {
        "keccak256": "0x312e75443376ff6bc05125c16ea1a722a80ed6a6a2a7b020678c38213a70162a",
        "urls": [
          "bzz-raw://a438ac6c4856d78541746484c1a5e1398ff6b505862058c89e90febdffc28f72",
          "dweb:/ipfs/QmYhRQ33bdLWSqbySqKQtu9fzKpQrEXEKzuS1TFwyMtbDg"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Errors.sol": {
        "keccak256": "0x71a19d407221fcea92fcac522d36010ba42c3ce2ed7d4a1eec283bd5ac0cf9e2",
        "urls": [
          "bzz-raw://996ad3941b48e86433352d2ad8b19eafd3ff2454983bd8ffea28d37d6c4447cc",
          "dweb:/ipfs/QmV2VSpQimdngfY5fx8SVARDecJdN19TPjbFckUAAoGcKM"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Helpers.sol": {
        "keccak256": "0xc8b24ba940189a13418aae6c1483a7b9acde1d35a99ee0134f6d58ec05c524c8",
        "urls": [
          "bzz-raw://d71dc8cbded4150cc3db9612123892e4ee79e6a37d106c40f406054ba4035792",
          "dweb:/ipfs/QmeyY1XasbY2iE997mjDyzUKYCfdsppnRQV3FvvYF5uhiw"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/Math.sol": {
        "keccak256": "0x561694ead1deae45027c5851c24eab53dc9f8a7eb8c623fdf5eebe56dd9da20a",
        "urls": [
          "bzz-raw://1dc6789db7d57ce54bc82c5aa74623dc12c3e0cafbaf921940788d0f502a66c5",
          "dweb:/ipfs/QmeiDrGFSCGNk99ggThYVE4pEaEAgb4LmxgZZKq4GWS2Sv"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/sd59x18/ValueType.sol": {
        "keccak256": "0xaf4cc89130b6ce22ae7e1d1bd8d912019278d7d9b35e37bb211aa78cc1b7ff32",
        "urls": [
          "bzz-raw://1c535c057358dda38d58c596272ad505811563bcfad51545ae82f0e9d0e39cb9",
          "dweb:/ipfs/QmVDTjMFxzZqtmLEQm55KaPy6hytAqG7Ve2tYzvYCvswcv"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/Casting.sol": {
        "keccak256": "0x395a47779cf0a9358b9998a5ebfc48a0dc07062e4f6a5d3ac536f7870e43691e",
        "urls": [
          "bzz-raw://f626199e5bc02936ac2520ff4d2f26ff318536e83e47b9880f558b85114282d3",
          "dweb:/ipfs/QmaqVnsvezFpoYoYDhFoskKFvUL37DW6Hwry5ktvkX5KvJ"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/Constants.sol": {
        "keccak256": "0xe7cad7b8cb3daa6d124e5b4b9aff8148bb4b573f5ead0b8ffe16f8548c1a8587",
        "urls": [
          "bzz-raw://b8c477fb4a12612276c5746052897fce01cf6ad0f31cc8e6b19b7e125ef41bb5",
          "dweb:/ipfs/QmWENWZ15cTVByU2ixuHbNdk5EjCaawkstTbn7vNnRzZtU"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/Errors.sol": {
        "keccak256": "0x28e16c14bae589f4d257726a7b6d89ec03112712beaf0f91b33c0a188519fe87",
        "urls": [
          "bzz-raw://e80ca782d9ea4e5f1ba02981ec5bba4df740912b192e1a2b119e6fa920c45aea",
          "dweb:/ipfs/QmYhdVYTh67Mbh77aQMHt1UTbJKuuhHeT4nhCbKCAM3HEr"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud2x18/ValueType.sol": {
        "keccak256": "0xc8590c817624727ad369239cdf304b71015041714d6bf2f88569797742be628c",
        "urls": [
          "bzz-raw://6e9d4071f4c97d4582e6cc0290254e798593185bc0b0c4d399758677e5253921",
          "dweb:/ipfs/QmUjpqj1Y9wnmgVhtPQXTJ7eW1wwhfaWJbHRCrxZ2niQ3T"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Casting.sol": {
        "keccak256": "0xbdce3b69f27fb198ea084b5df90a83075a61e9fee7021da2e556fa7c8a7574cd",
        "urls": [
          "bzz-raw://0b09c907651b797384f53009e70a11fd6c7a795a85158e872598f13c337500b2",
          "dweb:/ipfs/QmUKCfKrcsbsR1QqhDpsC7NanQhPyuoVa3KS78Lqy83Lfi"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Constants.sol": {
        "keccak256": "0x3d2219fe39162d051d993702598c15a2735784fff0c0d2dadea1b02a51cb20f0",
        "urls": [
          "bzz-raw://176f0175397a2965f2b1380c9f97cdcffdafaa7f2d3585c5db26d61b4902299e",
          "dweb:/ipfs/QmbuGa84ah972Qa2JBFHbE4aLoN6cx1J8hDLztzStGrRMf"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Conversions.sol": {
        "keccak256": "0xa949472633cc36fa8d2714e167ff71b51198358bf3f6117d038350e14f30cec8",
        "urls": [
          "bzz-raw://3f2d3b3631b3b43cd43f3ef41c2912582eb7bd56c83dfab417adf1a7afa81fd4",
          "dweb:/ipfs/QmfDFXkXLYp1skMZ6CBnYkL3aJKdVPfC9SnfcSSwbkJ2Wm"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Errors.sol": {
        "keccak256": "0x3a25f4e18a8a69fa9ac84f826bbfa4b6535788ae9a26623cc848e169e5d842ad",
        "urls": [
          "bzz-raw://8b34b02e146128930fa73b3a2de2f22c27dbf180012096d2602256263fdda18a",
          "dweb:/ipfs/QmQ46FQ2arioGSwAePLiLDGv6CBtkrqdJAifV7MFPqfPPu"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Helpers.sol": {
        "keccak256": "0x24c9c09d2dd73770c516a4f08296aa9e83b6431b52d97990a726c41c8aa2746f",
        "urls": [
          "bzz-raw://e5ec749ccb50bd3420346951875c2a0bb6469e90190c82630de6b2117a8fad29",
          "dweb:/ipfs/QmT4dgxVtbwMbSLyFRXeyYzfda7AvMyRUVZzd6yUS8qr7C"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/Math.sol": {
        "keccak256": "0xb9c4ab4753274baf1cc88b90da04b1308445c074eb94d7ab229109d78602497b",
        "urls": [
          "bzz-raw://e80843aeb21429a0c12dfd22f2f1d69478de32b8cb17b312e86fa2b0cfe50f7e",
          "dweb:/ipfs/QmdY293FrZb9KeaHTfq7wMXpQWinqFHhiLaSyQLKNcWs8w"
        ],
        "license": "MIT"
      },
      "lib/v2-core/lib/prb-math/src/ud60x18/ValueType.sol": {
        "keccak256": "0x3a2ada6e87a1c61d3a58e7ff9d5ea9eee00a4cca8b350a9d461e3bb2867693f2",
        "urls": [
          "bzz-raw://021a34174b566e8575ce7f9d8f93f3e96c8fa748192bc5f9b4bdc049ce6675cc",
          "dweb:/ipfs/QmXa6CXbEnf7K64phvDePsjznomBWZMkCg5nGn81KuwFf2"
        ],
        "license": "MIT"
      },
      "lib/v2-core/src/interfaces/IAdminable.sol": {
        "keccak256": "0x289bd3a74cb971dd3928c44d194d9b75939d75494901df32512b5ccbc0ed8cb0",
        "urls": [
          "bzz-raw://634a0098bc40a927bbefe46f6f2d8a5d94f9f92c5bad0149e4c7da67b0731bc7",
          "dweb:/ipfs/QmVsMVaKZ51uG7wyTrcoSMHsMYmVvuCuPnVgNHJfFRKeSQ"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2Base.sol": {
        "keccak256": "0x7fa3b890885b19de99e290ccd1d90da3d021be70bd4792c582b7f9e451749792",
        "urls": [
          "bzz-raw://5efc3274c9ac532baf96805f127e8b46b7292b12149eca7d830263bbe6ffde95",
          "dweb:/ipfs/QmNZaKcPahmA8juiY42FShVvRn4pktyubP13oyr5p6uCJk"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2Comptroller.sol": {
        "keccak256": "0x2133c91a65c1cdfa24b0c5b35317848d167436d49ecef4e22b72934f8ed9f2fa",
        "urls": [
          "bzz-raw://f6935d55b1763eeca5e4392542586b2168f100036bcffddd6800cf28aa18052c",
          "dweb:/ipfs/QmRzRxdbcppc1tMv1gQ9NzT5iftEFP8QS57G1RbyAKbyoT"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2Lockup.sol": {
        "keccak256": "0xa971017f4caff1aff29e1cfc6edac609d771b967aafb8543104bccdd0a5a77d0",
        "urls": [
          "bzz-raw://cc9319188115a84f87891a8745bf42511fee66c213d97d99d08e35aaa4720d93",
          "dweb:/ipfs/QmeFjJZoKA2wGzVoBdwx8f6baciuKZUBQRYiyo2Moidhic"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol": {
        "keccak256": "0x03c6a5965351524efcfa9a09dd6591d8ce46360f2660c27b98e4c702fd48dba2",
        "urls": [
          "bzz-raw://9a8fceedde8f2474736e67ea993f6d56a58c43ceab7d45b612c355d34be1317b",
          "dweb:/ipfs/QmQWLyqXpWjARgwgPPFGYSC4H8nMPmPACrs4X7BdjMzCJV"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/interfaces/ISablierV2NFTDescriptor.sol": {
        "keccak256": "0xe7840e59d0ce011e0be119098e82a3b4deb6ca779c816855ebed6a29349fc970",
        "urls": [
          "bzz-raw://733f9f5f21b72b76a121677b5f2dcd113e301408d969b5364d082c7c9dc8fec7",
          "dweb:/ipfs/QmdtUp1Ss4dHBnosNkjT9tCuxJ26UTP5dBxrVEJRZhe76E"
        ],
        "license": "GPL-3.0-or-later"
      },
      "lib/v2-core/src/types/DataTypes.sol": {
        "keccak256": "0x83883c59bf969d1f64d3eaa073c35e3ab4e1cdf5502a3973ba710eb282cbb2b4",
        "urls": [
          "bzz-raw://4616d1730d519454bba426748a9fbf71dd5488c38b6a7584e49f7a669150bfcc",
          "dweb:/ipfs/QmXqLNBS9J3hnuR9bzh8cc4Q63KdLs8M9Ze9F3P2k8rBhL"
        ],
        "license": "GPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/v2-core/src/interfaces/ISablierV2LockupLinear.sol",
    "id": 61342,
    "exportedSymbols": {
      "IERC20": [
        53679
      ],
      "ISablierV2Lockup": [
        61252
      ],
      "ISablierV2LockupLinear": [
        61341
      ],
      "Lockup": [
        61398
      ],
      "LockupLinear": [
        61570
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:6217:106",
    "nodes": [
      {
        "id": 61254,
        "nodeType": "PragmaDirective",
        "src": "46:25:106",
        "nodes": [],
        "literals": [
          "solidity",
          ">=",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 61256,
        "nodeType": "ImportDirective",
        "src": "75:72:106",
        "nodes": [],
        "absolutePath": "lib/v2-core/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61342,
        "sourceUnit": 53680,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61255,
              "name": "IERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 53679,
              "src": "84:6:106",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61259,
        "nodeType": "ImportDirective",
        "src": "151:62:106",
        "nodes": [],
        "absolutePath": "lib/v2-core/src/types/DataTypes.sol",
        "file": "../types/DataTypes.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61342,
        "sourceUnit": 61571,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61257,
              "name": "Lockup",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 61398,
              "src": "160:6:106",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 61258,
              "name": "LockupLinear",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 61570,
              "src": "168:12:106",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61261,
        "nodeType": "ImportDirective",
        "src": "215:58:106",
        "nodes": [],
        "absolutePath": "lib/v2-core/src/interfaces/ISablierV2Lockup.sol",
        "file": "./ISablierV2Lockup.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 61342,
        "sourceUnit": 61253,
        "symbolAliases": [
          {
            "foreign": {
              "id": 61260,
              "name": "ISablierV2Lockup",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 61252,
              "src": "224:16:106",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 61341,
        "nodeType": "ContractDefinition",
        "src": "394:5867:106",
        "nodes": [
          {
            "id": 61288,
            "nodeType": "EventDefinition",
            "src": "1602:315:106",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 61265,
              "nodeType": "StructuredDocumentation",
              "src": "667:929:106",
              "text": "@notice Emitted when a stream is created.\n @param streamId The id of the newly created stream.\n @param funder The address which funded the stream.\n @param sender The address streaming the assets, with the ability to cancel the stream.\n @param recipient The address receiving the assets.\n @param amounts Struct containing (i) the deposit amount, (ii) the protocol fee amount, and (iii) the\n broker fee amount, all denoted in units of the asset's decimals.\n @param asset The contract address of the ERC-20 asset used for streaming.\n @param cancelable Boolean indicating whether the stream will be cancelable or not.\n @param range Struct containing (i) the stream's start time, (ii) cliff time, and (iii) end time, all as Unix\n timestamps.\n @param broker The address of the broker who has helped create the stream, e.g. a front-end website."
            },
            "eventSelector": "6a14b1f86e996f59f3a5a72afa0f99cc59199944c80ad4f7260c9b3e3a07b110",
            "name": "CreateLockupLinearStream",
            "nameLocation": "1608:24:106",
            "parameters": {
              "id": 61287,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61267,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "1651:8:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1643:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61266,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1643:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61269,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "funder",
                  "nameLocation": "1678:6:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1670:14:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61268,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1670:7:106",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61271,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "1711:6:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1695:22:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61270,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1695:7:106",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61273,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "1744:9:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1728:25:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61272,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1728:7:106",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61276,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amounts",
                  "nameLocation": "1785:7:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1764:28:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CreateAmounts_$61390_memory_ptr",
                    "typeString": "struct Lockup.CreateAmounts"
                  },
                  "typeName": {
                    "id": 61275,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61274,
                      "name": "Lockup.CreateAmounts",
                      "nameLocations": [
                        "1764:6:106",
                        "1771:13:106"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61390,
                      "src": "1764:20:106"
                    },
                    "referencedDeclaration": 61390,
                    "src": "1764:20:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CreateAmounts_$61390_storage_ptr",
                      "typeString": "struct Lockup.CreateAmounts"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61279,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "1818:5:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1803:20:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$53679",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 61278,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61277,
                      "name": "IERC20",
                      "nameLocations": [
                        "1803:6:106"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 53679,
                      "src": "1803:6:106"
                    },
                    "referencedDeclaration": 53679,
                    "src": "1803:6:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$53679",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61281,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "cancelable",
                  "nameLocation": "1839:10:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1834:15:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61280,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1834:4:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61284,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "range",
                  "nameLocation": "1879:5:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1860:24:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Range_$61545_memory_ptr",
                    "typeString": "struct LockupLinear.Range"
                  },
                  "typeName": {
                    "id": 61283,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61282,
                      "name": "LockupLinear.Range",
                      "nameLocations": [
                        "1860:12:106",
                        "1873:5:106"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61545,
                      "src": "1860:18:106"
                    },
                    "referencedDeclaration": 61545,
                    "src": "1860:18:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Range_$61545_storage_ptr",
                      "typeString": "struct LockupLinear.Range"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 61286,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "broker",
                  "nameLocation": "1903:6:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61288,
                  "src": "1895:14:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 61285,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1895:7:106",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1632:284:106"
            }
          },
          {
            "id": 61296,
            "nodeType": "FunctionDefinition",
            "src": "2339:81:106",
            "nodes": [],
            "documentation": {
              "id": 61289,
              "nodeType": "StructuredDocumentation",
              "src": "2144:189:106",
              "text": "@notice Retrieves the stream's cliff time, which is a Unix timestamp.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "780a82c8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCliffTime",
            "nameLocation": "2348:12:106",
            "parameters": {
              "id": 61292,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61291,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "2369:8:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61296,
                  "src": "2361:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61290,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2361:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2360:18:106"
            },
            "returnParameters": {
              "id": 61295,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61294,
                  "mutability": "mutable",
                  "name": "cliffTime",
                  "nameLocation": "2409:9:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61296,
                  "src": "2402:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 61293,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "2402:6:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2401:18:106"
            },
            "scope": 61341,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61305,
            "nodeType": "FunctionDefinition",
            "src": "2719:92:106",
            "nodes": [],
            "documentation": {
              "id": 61297,
              "nodeType": "StructuredDocumentation",
              "src": "2428:285:106",
              "text": "@notice Retrieves the stream's range, which is a struct containing (i) the stream's start time, (ii) cliff\n time, and (iii) end time, all as Unix timestamps.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "cc364f48",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRange",
            "nameLocation": "2728:8:106",
            "parameters": {
              "id": 61300,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61299,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "2745:8:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61305,
                  "src": "2737:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61298,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2737:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2736:18:106"
            },
            "returnParameters": {
              "id": 61304,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61303,
                  "mutability": "mutable",
                  "name": "range",
                  "nameLocation": "2804:5:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61305,
                  "src": "2778:31:106",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Range_$61545_memory_ptr",
                    "typeString": "struct LockupLinear.Range"
                  },
                  "typeName": {
                    "id": 61302,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61301,
                      "name": "LockupLinear.Range",
                      "nameLocations": [
                        "2778:12:106",
                        "2791:5:106"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61545,
                      "src": "2778:18:106"
                    },
                    "referencedDeclaration": 61545,
                    "src": "2778:18:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Range_$61545_storage_ptr",
                      "typeString": "struct LockupLinear.Range"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2777:33:106"
            },
            "scope": 61341,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61314,
            "nodeType": "FunctionDefinition",
            "src": "2981:95:106",
            "nodes": [],
            "documentation": {
              "id": 61306,
              "nodeType": "StructuredDocumentation",
              "src": "2819:156:106",
              "text": "@notice Retrieves the stream entity.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "894e9a0d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getStream",
            "nameLocation": "2990:9:106",
            "parameters": {
              "id": 61309,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61308,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3008:8:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61314,
                  "src": "3000:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61307,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3000:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2999:18:106"
            },
            "returnParameters": {
              "id": 61313,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61312,
                  "mutability": "mutable",
                  "name": "stream",
                  "nameLocation": "3068:6:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61314,
                  "src": "3041:33:106",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Stream_$61569_memory_ptr",
                    "typeString": "struct LockupLinear.Stream"
                  },
                  "typeName": {
                    "id": 61311,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61310,
                      "name": "LockupLinear.Stream",
                      "nameLocations": [
                        "3041:12:106",
                        "3054:6:106"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61569,
                      "src": "3041:19:106"
                    },
                    "referencedDeclaration": 61569,
                    "src": "3041:19:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Stream_$61569_storage_ptr",
                      "typeString": "struct LockupLinear.Stream"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3040:35:106"
            },
            "scope": 61341,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61322,
            "nodeType": "FunctionDefinition",
            "src": "3917:91:106",
            "nodes": [],
            "baseFunctions": [
              61165
            ],
            "documentation": {
              "id": 61315,
              "nodeType": "StructuredDocumentation",
              "src": "3084:827:106",
              "text": "@notice Calculates the amount streamed to the recipient, denoted in units of the asset's decimals.\n When the stream is warm, the streaming function is:\n $$\n f(x) = x * d + c\n $$\n Where:\n - $x$ is the elapsed time divided by the stream's total duration.\n - $d$ is the deposited amount.\n - $c$ is the cliff amount.\n Upon cancellation of the stream, the amount streamed is calculated as the difference between the deposited\n amount and the refunded amount. Ultimately, when the stream becomes depleted, the streamed amount is equivalent\n to the total amount withdrawn.\n @dev Reverts if `streamId` references a null stream.\n @param streamId The stream id for the query."
            },
            "functionSelector": "4869e12d",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "streamedAmountOf",
            "nameLocation": "3926:16:106",
            "parameters": {
              "id": 61318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61317,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "3951:8:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61322,
                  "src": "3943:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61316,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3943:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3942:18:106"
            },
            "returnParameters": {
              "id": 61321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61320,
                  "mutability": "mutable",
                  "name": "streamedAmount",
                  "nameLocation": "3992:14:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61322,
                  "src": "3984:22:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 61319,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "3984:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3983:24:106"
            },
            "scope": 61341,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61331,
            "nodeType": "FunctionDefinition",
            "src": "4867:133:106",
            "nodes": [],
            "documentation": {
              "id": 61323,
              "nodeType": "StructuredDocumentation",
              "src": "4237:624:106",
              "text": "@notice Creates a stream by setting the start time to `block.timestamp`, and the end time to\n the sum of `block.timestamp` and `params.durations.total. The stream is funded by `msg.sender` and is wrapped\n in an ERC-721 NFT.\n @dev Emits a {Transfer} and {CreateLockupLinearStream} event.\n Requirements:\n - All requirements in {createWithRange} must be met for the calculated parameters.\n @param params Struct encapsulating the function parameters, which are documented in {DataTypes}.\n @return streamId The id of the newly created stream."
            },
            "functionSelector": "1b4103a9",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createWithDurations",
            "nameLocation": "4876:19:106",
            "parameters": {
              "id": 61327,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61326,
                  "mutability": "mutable",
                  "name": "params",
                  "nameLocation": "4938:6:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61331,
                  "src": "4896:48:106",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CreateWithDurations_$61512_calldata_ptr",
                    "typeString": "struct LockupLinear.CreateWithDurations"
                  },
                  "typeName": {
                    "id": 61325,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61324,
                      "name": "LockupLinear.CreateWithDurations",
                      "nameLocations": [
                        "4896:12:106",
                        "4909:19:106"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61512,
                      "src": "4896:32:106"
                    },
                    "referencedDeclaration": 61512,
                    "src": "4896:32:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CreateWithDurations_$61512_storage_ptr",
                      "typeString": "struct LockupLinear.CreateWithDurations"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4895:50:106"
            },
            "returnParameters": {
              "id": 61330,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61329,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "4990:8:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61331,
                  "src": "4982:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61328,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4982:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4981:18:106"
            },
            "scope": 61341,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 61340,
            "nodeType": "FunctionDefinition",
            "src": "6151:107:106",
            "nodes": [],
            "documentation": {
              "id": 61332,
              "nodeType": "StructuredDocumentation",
              "src": "5008:1137:106",
              "text": "@notice Creates a stream with the provided start time and end time as the range. The stream is\n funded by `msg.sender` and is wrapped in an ERC-721 NFT.\n @dev Emits a {Transfer} and {CreateLockupLinearStream} event.\n Notes:\n - As long as the times are ordered, it is not an error for the start or the cliff time to be in the past.\n Requirements:\n - Must not be delegate called.\n - `params.totalAmount` must be greater than zero.\n - If set, `params.broker.fee` must not be greater than `MAX_FEE`.\n - `params.range.start` must be less than or equal to `params.range.cliff`.\n - `params.range.cliff` must be less than `params.range.end`.\n - `params.range.end` must be in the future.\n - `params.recipient` must not be the zero address.\n - `msg.sender` must have allowed this contract to spend at least `params.totalAmount` assets.\n @param params Struct encapsulating the function parameters, which are documented in {DataTypes}.\n @return streamId The id of the newly created stream."
            },
            "functionSelector": "4bc78b73",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createWithRange",
            "nameLocation": "6160:15:106",
            "parameters": {
              "id": 61336,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61335,
                  "mutability": "mutable",
                  "name": "params",
                  "nameLocation": "6214:6:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61340,
                  "src": "6176:44:106",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CreateWithRange_$61531_calldata_ptr",
                    "typeString": "struct LockupLinear.CreateWithRange"
                  },
                  "typeName": {
                    "id": 61334,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 61333,
                      "name": "LockupLinear.CreateWithRange",
                      "nameLocations": [
                        "6176:12:106",
                        "6189:15:106"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 61531,
                      "src": "6176:28:106"
                    },
                    "referencedDeclaration": 61531,
                    "src": "6176:28:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CreateWithRange_$61531_storage_ptr",
                      "typeString": "struct LockupLinear.CreateWithRange"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6175:46:106"
            },
            "returnParameters": {
              "id": 61339,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 61338,
                  "mutability": "mutable",
                  "name": "streamId",
                  "nameLocation": "6248:8:106",
                  "nodeType": "VariableDeclaration",
                  "scope": 61340,
                  "src": "6240:16:106",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 61337,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6240:7:106",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6239:18:106"
            },
            "scope": 61341,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 61263,
              "name": "ISablierV2Lockup",
              "nameLocations": [
                "430:16:106"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 61252,
              "src": "430:16:106"
            },
            "id": 61264,
            "nodeType": "InheritanceSpecifier",
            "src": "430:16:106"
          }
        ],
        "canonicalName": "ISablierV2LockupLinear",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 61262,
          "nodeType": "StructuredDocumentation",
          "src": "277:117:106",
          "text": "@title ISablierV2LockupLinear\n @notice Creates and manages lockup streams with a linear streaming function."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          61341,
          61252,
          53822,
          53795,
          53834,
          60877,
          60805
        ],
        "name": "ISablierV2LockupLinear",
        "nameLocation": "404:22:106",
        "scope": 61342,
        "usedErrors": [],
        "usedEvents": [
          53694,
          53703,
          53712,
          60792,
          60828,
          60839,
          61004,
          61009,
          61020,
          61029,
          61288
        ]
      }
    ],
    "license": "GPL-3.0-or-later"
  },
  "id": 106
}