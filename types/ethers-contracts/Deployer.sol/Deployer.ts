/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type DeploymentStruct = {
  addr: AddressLike;
  bytecode: BytesLike;
  args: BytesLike;
};

export type DeploymentStructOutput = [
  addr: string,
  bytecode: string,
  args: string
] & { addr: string; bytecode: string; args: string };

export type DeployerDeploymentStruct = {
  name: string;
  addr: AddressLike;
  bytecode: BytesLike;
  args: BytesLike;
  artifact: string;
  deploymentContext: string;
  chainIdAsString: string;
};

export type DeployerDeploymentStructOutput = [
  name: string,
  addr: string,
  bytecode: string,
  args: string,
  artifact: string,
  deploymentContext: string,
  chainIdAsString: string
] & {
  name: string;
  addr: string;
  bytecode: string;
  args: string;
  artifact: string;
  deploymentContext: string;
  chainIdAsString: string;
};

export interface DeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activatePrank"
      | "autoBroadcasting"
      | "deactivatePrank"
      | "get"
      | "getAddress"
      | "has"
      | "ignoreDeployment"
      | "isTagEnabled"
      | "newDeployments"
      | "prankStatus"
      | "save(string,address,string,bytes,bytes)"
      | "save(string,address,string,bytes)"
      | "save(string,address,string)"
      | "setAutoBroadcast"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activatePrank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "autoBroadcasting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivatePrank",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "get", values: [string]): string;
  encodeFunctionData(functionFragment: "getAddress", values: [string]): string;
  encodeFunctionData(functionFragment: "has", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ignoreDeployment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTagEnabled",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newDeployments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prankStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "save(string,address,string,bytes,bytes)",
    values: [string, AddressLike, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "save(string,address,string,bytes)",
    values: [string, AddressLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "save(string,address,string)",
    values: [string, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoBroadcast",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePrank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoBroadcasting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivatePrank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "has", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ignoreDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTagEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newDeployments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prankStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "save(string,address,string,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "save(string,address,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "save(string,address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoBroadcast",
    data: BytesLike
  ): Result;
}

export interface Deployer extends BaseContract {
  connect(runner?: ContractRunner | null): Deployer;
  waitForDeployment(): Promise<this>;

  interface: DeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activatePrank: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  autoBroadcasting: TypedContractMethod<[], [boolean], "nonpayable">;

  deactivatePrank: TypedContractMethod<[], [void], "nonpayable">;

  get: TypedContractMethod<[name: string], [DeploymentStructOutput], "view">;

  getAddress: TypedContractMethod<[name: string], [string], "view">;

  has: TypedContractMethod<[name: string], [boolean], "view">;

  ignoreDeployment: TypedContractMethod<[name: string], [void], "nonpayable">;

  isTagEnabled: TypedContractMethod<[tag: string], [boolean], "view">;

  newDeployments: TypedContractMethod<
    [],
    [DeployerDeploymentStructOutput[]],
    "view"
  >;

  prankStatus: TypedContractMethod<
    [],
    [[boolean, string] & { active: boolean; addr: string }],
    "view"
  >;

  "save(string,address,string,bytes,bytes)": TypedContractMethod<
    [
      name: string,
      deployed: AddressLike,
      artifact: string,
      args: BytesLike,
      bytecode: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "save(string,address,string,bytes)": TypedContractMethod<
    [name: string, deployed: AddressLike, artifact: string, args: BytesLike],
    [void],
    "nonpayable"
  >;

  "save(string,address,string)": TypedContractMethod<
    [name: string, deployed: AddressLike, artifact: string],
    [void],
    "nonpayable"
  >;

  setAutoBroadcast: TypedContractMethod<
    [broadcast: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activatePrank"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "autoBroadcasting"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivatePrank"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[name: string], [DeploymentStructOutput], "view">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "has"
  ): TypedContractMethod<[name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "ignoreDeployment"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isTagEnabled"
  ): TypedContractMethod<[tag: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "newDeployments"
  ): TypedContractMethod<[], [DeployerDeploymentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "prankStatus"
  ): TypedContractMethod<
    [],
    [[boolean, string] & { active: boolean; addr: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "save(string,address,string,bytes,bytes)"
  ): TypedContractMethod<
    [
      name: string,
      deployed: AddressLike,
      artifact: string,
      args: BytesLike,
      bytecode: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "save(string,address,string,bytes)"
  ): TypedContractMethod<
    [name: string, deployed: AddressLike, artifact: string, args: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "save(string,address,string)"
  ): TypedContractMethod<
    [name: string, deployed: AddressLike, artifact: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAutoBroadcast"
  ): TypedContractMethod<[broadcast: boolean], [void], "nonpayable">;

  filters: {};
}
